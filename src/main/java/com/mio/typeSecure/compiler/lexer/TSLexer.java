// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: /home/mio/Escritorio/2023/proyecto-final-compi1/src/main/jflex/tsLexer.jflex

package com.mio.typeSecure.compiler.lexer;

/*
compilar archivo.jflex
java -jar jflex-full-1.9.0.jar /home/mio/Escritorio/2023/proyecto-final-compi1/src/main/jflex/tsLexer.jflex
*/

import com.mio.typeSecure.compiler.Token;
import static com.mio.typeSecure.compiler.parser.TSParserSym.*;

import com.mio.typeSecure.compiler.parser.TSParserSym;
import java_cup.runtime.Symbol;




@SuppressWarnings("fallthrough")
public class TSLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\7\23\1\25\1\26\1\27\1\30\1\31\2\6"+
    "\1\32\1\33\1\34\1\35\1\36\3\35\1\37\2\35"+
    "\1\40\1\41\1\42\1\35\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\5\35\1\6\1\0\1\6\1\0\1\35"+
    "\1\0\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\35\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\35\1\101\1\102\1\103\1\6\53\0"+
    "\1\6\1\0\1\6\12\0\1\6\2\0\1\6\2\0"+
    "\1\6\u0142\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\25\24\1\25"+
    "\1\1\1\26\1\27\1\0\1\30\1\31\1\0\1\32"+
    "\1\33\1\0\1\2\1\0\1\34\1\35\1\36\1\37"+
    "\12\24\1\40\5\24\1\41\12\24\1\42\1\0\1\16"+
    "\14\24\1\43\3\24\1\44\26\24\1\45\12\24\1\46"+
    "\1\24\1\47\3\24\1\0\4\24\1\50\3\24\1\51"+
    "\1\24\1\52\12\24\1\53\1\54\1\24\1\55\12\0"+
    "\1\56\1\57\1\60\1\24\1\61\1\62\4\24\1\63"+
    "\1\64\1\24\1\65\1\66\3\24\1\67\1\70\13\0"+
    "\1\71\10\24\1\0\1\72\1\0\1\73\1\74\1\0"+
    "\1\75\1\0\1\76\1\0\1\77\1\0\1\100\1\101"+
    "\1\24\1\102\3\24\1\0\1\103\2\0\1\104\1\0"+
    "\3\24\1\105\1\106\1\107\2\0\3\24\1\0\1\110"+
    "\1\24\1\111\1\112\1\0\1\24\1\113\1\24\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\104\0\210\0\314\0\u0110\0\u0154\0\u0154"+
    "\0\u0198\0\u01dc\0\104\0\104\0\104\0\u0220\0\104\0\u0264"+
    "\0\104\0\u02a8\0\u02ec\0\u0330\0\104\0\104\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\104\0\u09d4"+
    "\0\104\0\104\0\u0110\0\104\0\104\0\u01dc\0\104\0\104"+
    "\0\u0a18\0\u0a5c\0\u0aa0\0\104\0\104\0\104\0\104\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0d48\0\u0440\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0440"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\104\0\u1188\0\u0aa0\0\u11cc\0\u1210\0\u1254"+
    "\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u0440\0\u14fc\0\u1540\0\u1584\0\u0440\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c"+
    "\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u0440\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u0440"+
    "\0\u1e48\0\u0440\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u0440\0\u20ac\0\u20f0\0\u2134\0\u0440\0\u2178"+
    "\0\u0440\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u0440\0\u0440\0\u2464\0\104\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8"+
    "\0\u270c\0\u0440\0\u0440\0\u0440\0\u2750\0\u0440\0\u0440\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u0440\0\u0440\0\u28a4\0\u0440\0\u0440"+
    "\0\u28e8\0\u292c\0\u2970\0\u0440\0\104\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\u0440\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\104\0\u2f04\0\104\0\104\0\u2f48\0\104"+
    "\0\u2f8c\0\104\0\u2fd0\0\104\0\u3014\0\u0440\0\u0440\0\u3058"+
    "\0\u0440\0\u309c\0\u30e0\0\u3124\0\u3168\0\104\0\u31ac\0\u31f0"+
    "\0\104\0\u3234\0\u3278\0\u32bc\0\u3300\0\u0440\0\104\0\104"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\104\0\u34dc"+
    "\0\u0440\0\u0440\0\u3520\0\u3564\0\104\0\u35a8\0\u0440";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\5\32\1\34\1\35\3\32\1\36\3\32"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\32\1\45"+
    "\1\32\1\46\1\32\1\47\1\32\1\50\1\32\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\32\1\57\1\60"+
    "\1\61\106\0\1\3\131\0\1\62\53\0\5\63\1\64"+
    "\76\63\6\0\2\7\104\0\1\65\73\0\11\66\1\64"+
    "\72\66\15\0\1\67\105\0\1\70\100\0\1\71\4\0"+
    "\1\72\102\0\1\73\44\0\1\74\36\0\1\73\1\0"+
    "\3\24\40\0\1\74\46\0\1\75\103\0\1\76\103\0"+
    "\1\77\75\0\3\32\5\0\47\32\25\0\3\32\5\0"+
    "\27\32\1\100\4\32\1\101\12\32\25\0\3\32\5\0"+
    "\17\32\1\102\27\32\25\0\3\32\5\0\42\32\1\103"+
    "\4\32\25\0\3\32\5\0\41\32\1\104\5\32\25\0"+
    "\3\32\5\0\27\32\1\105\4\32\1\106\2\32\1\107"+
    "\7\32\25\0\3\32\5\0\26\32\1\110\5\32\1\111"+
    "\12\32\25\0\3\32\5\0\34\32\1\112\12\32\25\0"+
    "\3\32\5\0\31\32\1\113\15\32\25\0\3\32\5\0"+
    "\17\32\1\114\14\32\1\115\5\32\1\116\4\32\25\0"+
    "\3\32\5\0\23\32\1\117\23\32\25\0\3\32\5\0"+
    "\24\32\1\120\22\32\25\0\3\32\5\0\23\32\1\121"+
    "\23\32\25\0\3\32\5\0\42\32\1\122\4\32\25\0"+
    "\3\32\5\0\37\32\1\123\7\32\25\0\3\32\5\0"+
    "\23\32\1\124\23\32\25\0\3\32\5\0\41\32\1\125"+
    "\5\32\25\0\3\32\5\0\34\32\1\126\2\32\1\127"+
    "\7\32\25\0\3\32\5\0\33\32\1\130\13\32\25\0"+
    "\3\32\5\0\34\32\1\131\12\32\25\0\3\32\5\0"+
    "\26\32\1\132\20\32\105\0\1\133\1\0\14\71\1\134"+
    "\67\71\2\72\2\0\100\72\22\0\3\135\101\0\3\32"+
    "\5\0\25\32\1\136\21\32\25\0\3\32\5\0\34\32"+
    "\1\137\12\32\25\0\3\32\5\0\41\32\1\140\5\32"+
    "\25\0\3\32\5\0\32\32\1\141\14\32\25\0\3\32"+
    "\5\0\37\32\1\142\7\32\25\0\3\32\5\0\25\32"+
    "\1\143\21\32\25\0\3\32\5\0\34\32\1\144\12\32"+
    "\25\0\3\32\5\0\23\32\1\145\23\32\25\0\3\32"+
    "\5\0\17\32\1\146\27\32\25\0\3\32\5\0\33\32"+
    "\1\147\13\32\25\0\3\32\5\0\40\32\1\150\6\32"+
    "\25\0\3\32\5\0\31\32\1\151\15\32\25\0\3\32"+
    "\5\0\37\32\1\152\7\32\25\0\3\32\5\0\33\32"+
    "\1\153\13\32\25\0\3\32\5\0\41\32\1\154\5\32"+
    "\25\0\3\32\5\0\33\32\1\155\5\32\1\156\5\32"+
    "\25\0\3\32\5\0\32\32\1\157\14\32\25\0\3\32"+
    "\5\0\27\32\1\160\17\32\25\0\3\32\5\0\41\32"+
    "\1\161\5\32\25\0\3\32\5\0\37\32\1\162\7\32"+
    "\25\0\3\32\5\0\6\32\1\163\7\32\1\164\30\32"+
    "\25\0\3\32\5\0\42\32\1\165\4\32\25\0\3\32"+
    "\5\0\22\32\1\166\24\32\25\0\3\32\5\0\27\32"+
    "\1\167\17\32\25\0\3\32\5\0\27\32\1\170\17\32"+
    "\3\0\21\71\1\3\62\71\22\0\3\32\5\0\5\32"+
    "\1\171\41\32\25\0\3\32\5\0\31\32\1\172\15\32"+
    "\25\0\3\32\5\0\26\32\1\173\20\32\25\0\3\32"+
    "\5\0\20\32\1\174\26\32\25\0\3\32\5\0\27\32"+
    "\1\175\17\32\25\0\3\32\5\0\27\32\1\176\17\32"+
    "\25\0\3\32\5\0\31\32\1\177\15\32\25\0\3\32"+
    "\5\0\17\32\1\200\27\32\25\0\3\32\5\0\37\32"+
    "\1\201\7\32\25\0\3\32\5\0\21\32\1\202\16\32"+
    "\1\203\1\204\5\32\25\0\3\32\5\0\23\32\1\205"+
    "\23\32\25\0\3\32\5\0\40\32\1\206\6\32\25\0"+
    "\3\32\5\0\21\32\1\207\25\32\25\0\3\32\5\0"+
    "\14\32\1\210\32\32\25\0\3\32\5\0\25\32\1\211"+
    "\21\32\25\0\3\32\5\0\20\32\1\212\26\32\25\0"+
    "\3\32\5\0\33\32\1\213\13\32\25\0\3\32\5\0"+
    "\42\32\1\214\4\32\25\0\3\32\5\0\27\32\1\215"+
    "\17\32\25\0\3\32\5\0\34\32\1\216\12\32\25\0"+
    "\3\32\5\0\35\32\1\217\11\32\25\0\3\32\5\0"+
    "\23\32\1\220\23\32\25\0\3\32\5\0\23\32\1\221"+
    "\23\32\25\0\3\32\5\0\22\32\1\222\24\32\25\0"+
    "\3\32\5\0\31\32\1\223\15\32\25\0\3\32\5\0"+
    "\33\32\1\224\13\32\25\0\3\32\5\0\23\32\1\225"+
    "\23\32\23\0\1\226\1\0\3\32\5\0\47\32\25\0"+
    "\3\32\5\0\23\32\1\227\23\32\25\0\3\32\5\0"+
    "\33\32\1\230\13\32\25\0\3\32\5\0\33\32\1\231"+
    "\13\32\25\0\3\32\5\0\23\32\1\232\23\32\25\0"+
    "\3\32\5\0\30\32\1\233\16\32\25\0\3\32\5\0"+
    "\1\234\46\32\25\0\3\32\5\0\17\32\1\235\27\32"+
    "\25\0\3\32\5\0\34\32\1\236\4\32\1\237\5\32"+
    "\25\0\3\32\5\0\27\32\1\240\17\32\25\0\3\32"+
    "\5\0\23\32\1\241\23\32\25\0\3\32\5\0\41\32"+
    "\1\242\5\32\25\0\3\32\5\0\46\32\1\243\25\0"+
    "\3\32\5\0\41\32\1\244\5\32\25\0\3\32\5\0"+
    "\23\32\1\245\23\32\25\0\3\32\5\0\41\32\1\246"+
    "\5\32\25\0\3\32\5\0\37\32\1\247\7\32\25\0"+
    "\3\32\5\0\33\32\1\250\13\32\25\0\3\32\5\0"+
    "\44\32\1\251\2\32\25\0\3\32\5\0\35\32\1\252"+
    "\11\32\25\0\3\32\5\0\24\32\1\253\22\32\25\0"+
    "\3\32\5\0\23\32\1\254\23\32\25\0\3\32\5\0"+
    "\41\32\1\255\5\32\25\0\3\32\5\0\17\32\1\256"+
    "\27\32\41\0\1\257\4\0\1\260\2\0\1\261\2\0"+
    "\1\262\1\0\1\263\1\0\1\264\1\265\10\0\1\266"+
    "\1\0\1\267\1\270\1\271\32\0\3\32\5\0\37\32"+
    "\1\272\7\32\25\0\3\32\5\0\25\32\1\273\21\32"+
    "\25\0\3\32\5\0\41\32\1\274\5\32\25\0\3\32"+
    "\5\0\17\32\1\275\27\32\25\0\3\32\5\0\41\32"+
    "\1\276\5\32\25\0\3\32\5\0\41\32\1\277\5\32"+
    "\25\0\3\32\5\0\31\32\1\300\15\32\25\0\3\32"+
    "\5\0\33\32\1\301\13\32\25\0\3\32\5\0\27\32"+
    "\1\302\17\32\25\0\3\32\5\0\32\32\1\303\14\32"+
    "\25\0\3\32\5\0\26\32\1\304\20\32\25\0\3\32"+
    "\5\0\37\32\1\305\7\32\25\0\3\32\5\0\1\306"+
    "\46\32\25\0\3\32\5\0\33\32\1\307\13\32\25\0"+
    "\3\32\5\0\25\32\1\310\21\32\25\0\3\32\5\0"+
    "\23\32\1\311\23\32\25\0\3\32\5\0\23\32\1\312"+
    "\23\32\25\0\3\32\5\0\27\32\1\313\17\32\25\0"+
    "\3\32\5\0\33\32\1\314\13\32\42\0\1\315\110\0"+
    "\1\316\111\0\1\317\106\0\1\320\10\0\1\321\114\0"+
    "\1\322\67\0\1\323\106\0\1\324\66\0\1\325\113\0"+
    "\1\326\6\0\1\327\64\0\1\330\54\0\3\32\5\0"+
    "\33\32\1\331\13\32\25\0\3\32\5\0\23\32\1\332"+
    "\23\32\25\0\3\32\5\0\42\32\1\333\4\32\25\0"+
    "\3\32\5\0\34\32\1\334\12\32\25\0\3\32\5\0"+
    "\20\32\1\335\26\32\25\0\3\32\5\0\40\32\1\336"+
    "\6\32\25\0\3\32\5\0\37\32\1\337\7\32\25\0"+
    "\3\32\5\0\37\32\1\340\7\32\25\0\3\32\5\0"+
    "\33\32\1\341\13\32\50\0\1\342\130\0\1\343\72\0"+
    "\1\344\114\0\1\345\100\0\1\346\102\0\1\347\113\0"+
    "\1\350\72\0\1\351\103\0\1\352\107\0\1\353\77\0"+
    "\1\354\36\0\1\355\1\0\3\32\5\0\47\32\25\0"+
    "\3\32\5\0\23\32\1\356\23\32\25\0\3\32\5\0"+
    "\33\32\1\357\13\32\25\0\3\32\5\0\34\32\1\360"+
    "\12\32\25\0\3\32\5\0\41\32\1\361\5\32\25\0"+
    "\3\32\5\0\2\32\1\362\44\32\25\0\3\32\5\0"+
    "\2\32\1\363\44\32\25\0\3\32\5\0\23\32\1\364"+
    "\23\32\52\0\1\365\117\0\1\366\106\0\1\367\71\0"+
    "\1\370\122\0\1\371\73\0\1\372\42\0\3\32\5\0"+
    "\31\32\1\373\15\32\25\0\3\32\5\0\17\32\1\374"+
    "\27\32\25\0\3\32\5\0\17\32\1\375\27\32\25\0"+
    "\3\32\5\0\22\32\1\376\24\32\27\0\1\377\150\0"+
    "\1\u0100\100\0\1\u0101\103\0\1\u0102\37\0\3\32\5\0"+
    "\15\32\1\u0103\31\32\25\0\3\32\5\0\40\32\1\u0104"+
    "\6\32\25\0\3\32\5\0\40\32\1\u0105\6\32\67\0"+
    "\1\u0106\76\0\1\u0107\46\0\3\32\5\0\17\32\1\u0108"+
    "\27\32\25\0\3\32\5\0\23\32\1\u0109\23\32\25\0"+
    "\3\32\5\0\23\32\1\u010a\23\32\15\0\1\u010b\113\0"+
    "\3\32\5\0\20\32\1\u010c\26\32\16\0\1\u010d\112\0"+
    "\3\32\5\0\31\32\1\u010e\15\32\25\0\3\32\5\0"+
    "\23\32\1\u010f\23\32\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13804];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\3\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\30\1\1\11\1\1\2\11\1\0\2\11"+
    "\1\0\2\11\1\0\1\1\1\0\4\11\33\1\1\11"+
    "\1\0\71\1\1\0\30\1\1\11\12\0\23\1\1\11"+
    "\13\0\11\1\1\0\1\11\1\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\7\1\1\0\1\11"+
    "\2\0\1\11\1\0\4\1\2\11\2\0\3\1\1\0"+
    "\1\11\3\1\1\0\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbolWithValue(int type, Object value){
        System.out.println("Encontre: "+value.toString()+" "+TSParserSym.terminalNames[type]);
        return new Symbol(type, new Token(type, value.toString(), yyline+1, yycolumn+1 ));
    }

    private Symbol symbolWithoutValue(int type){
        System.out.println("Encontre: "+TSParserSym.terminalNames[type]);
        return new Symbol(type, new Token(type, null, yyline+1, yycolumn+1 ));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbolWithoutValue(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Simbolo Ilegal: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
          // fall through
          case 77: break;
          case 2:
            { ;
            }
          // fall through
          case 78: break;
          case 3:
            { return symbolWithoutValue(NOT);
            }
          // fall through
          case 79: break;
          case 4:
            { return symbolWithValue(SYM, yytext());
            }
          // fall through
          case 80: break;
          case 5:
            { return symbolWithoutValue(MOD);
            }
          // fall through
          case 81: break;
          case 6:
            { return symbolWithoutValue(LPAREN);
            }
          // fall through
          case 82: break;
          case 7:
            { return symbolWithoutValue(RPAREN);
            }
          // fall through
          case 83: break;
          case 8:
            { return symbolWithoutValue(TIMES);
            }
          // fall through
          case 84: break;
          case 9:
            { return symbolWithoutValue(PLUS);
            }
          // fall through
          case 85: break;
          case 10:
            { return symbolWithoutValue(COMMA);
            }
          // fall through
          case 86: break;
          case 11:
            { return symbolWithoutValue(MINUS);
            }
          // fall through
          case 87: break;
          case 12:
            { return symbolWithoutValue(DOT);
            }
          // fall through
          case 88: break;
          case 13:
            { return symbolWithoutValue(DIVIDE);
            }
          // fall through
          case 89: break;
          case 14:
            { return symbolWithValue(NUMBER_VALUE, yytext());
            }
          // fall through
          case 90: break;
          case 15:
            { return symbolWithoutValue(COLON);
            }
          // fall through
          case 91: break;
          case 16:
            { return symbolWithoutValue(SEMICOLON);
            }
          // fall through
          case 92: break;
          case 17:
            { return symbolWithoutValue(LESS);
            }
          // fall through
          case 93: break;
          case 18:
            { return symbolWithoutValue(ASSIGN);
            }
          // fall through
          case 94: break;
          case 19:
            { return symbolWithoutValue(GREATER);
            }
          // fall through
          case 95: break;
          case 20:
            { return symbolWithValue(ID, yytext());
            }
          // fall through
          case 96: break;
          case 21:
            { return symbolWithoutValue(LBRACE);
            }
          // fall through
          case 97: break;
          case 22:
            { return symbolWithoutValue(RBRACE);
            }
          // fall through
          case 98: break;
          case 23:
            { return symbolWithoutValue(NOT_EQUALS);
            }
          // fall through
          case 99: break;
          case 24:
            { return symbolWithValue(STRING_VALUE, yytext().substring(1, yytext().length()-1));
            }
          // fall through
          case 100: break;
          case 25:
            { return symbolWithoutValue(AND);
            }
          // fall through
          case 101: break;
          case 26:
            { return symbolWithoutValue(INCREMENT);
            }
          // fall through
          case 102: break;
          case 27:
            { return symbolWithoutValue(DECREMENT);
            }
          // fall through
          case 103: break;
          case 28:
            { return symbolWithValue(BIGINT_VALUE, yytext());
            }
          // fall through
          case 104: break;
          case 29:
            { return symbolWithoutValue(LESS_EQ);
            }
          // fall through
          case 105: break;
          case 30:
            { return symbolWithoutValue(EQUALS);
            }
          // fall through
          case 106: break;
          case 31:
            { return symbolWithoutValue(GREATER_EQ);
            }
          // fall through
          case 107: break;
          case 32:
            { return symbolWithoutValue(DO);
            }
          // fall through
          case 108: break;
          case 33:
            { return symbolWithoutValue(IF);
            }
          // fall through
          case 109: break;
          case 34:
            { return symbolWithoutValue(OR);
            }
          // fall through
          case 110: break;
          case 35:
            { return symbolWithoutValue(FOR);
            }
          // fall through
          case 111: break;
          case 36:
            { return symbolWithoutValue(LET);
            }
          // fall through
          case 112: break;
          case 37:
            { return symbolWithoutValue(ELSE);
            }
          // fall through
          case 113: break;
          case 38:
            { return symbolWithoutValue(TRUE);
            }
          // fall through
          case 114: break;
          case 39:
            { return symbolWithoutValue(VOID);
            }
          // fall through
          case 115: break;
          case 40:
            { return symbolWithoutValue(BREAK);
            }
          // fall through
          case 116: break;
          case 41:
            { return symbolWithoutValue(CONST);
            }
          // fall through
          case 117: break;
          case 42:
            { return symbolWithoutValue(FALSE);
            }
          // fall through
          case 118: break;
          case 43:
            { return symbolWithoutValue(WHILE);
            }
          // fall through
          case 119: break;
          case 44:
            { return symbolWithoutValue(BIGINT_FUN);
            }
          // fall through
          case 120: break;
          case 45:
            { return symbolWithoutValue(E);
            }
          // fall through
          case 121: break;
          case 46:
            { return symbolWithoutValue(NUMBER_FUN);
            }
          // fall through
          case 122: break;
          case 47:
            { return symbolWithoutValue(STRING_FUN);
            }
          // fall through
          case 123: break;
          case 48:
            { return symbolWithoutValue(BIGINT);
            }
          // fall through
          case 124: break;
          case 49:
            { return symbolWithoutValue(CHAR_AT);
            }
          // fall through
          case 125: break;
          case 50:
            { return symbolWithoutValue(CONCAT);
            }
          // fall through
          case 126: break;
          case 51:
            { return symbolWithoutValue(LENGTH);
            }
          // fall through
          case 127: break;
          case 52:
            { return symbolWithoutValue(NUMBER);
            }
          // fall through
          case 128: break;
          case 53:
            { return symbolWithoutValue(RETURN);
            }
          // fall through
          case 129: break;
          case 54:
            { return symbolWithoutValue(STRING);
            }
          // fall through
          case 130: break;
          case 55:
            { return symbolWithoutValue(BOOLEAN_FUN);
            }
          // fall through
          case 131: break;
          case 56:
            { return symbolWithoutValue(PI);
            }
          // fall through
          case 132: break;
          case 57:
            { return symbolWithoutValue(BOOLEAN);
            }
          // fall through
          case 133: break;
          case 58:
            { return symbolWithoutValue(ABS);
            }
          // fall through
          case 134: break;
          case 59:
            { return symbolWithoutValue(COS);
            }
          // fall through
          case 135: break;
          case 60:
            { return symbolWithoutValue(EXP);
            }
          // fall through
          case 136: break;
          case 61:
            { return symbolWithoutValue(POW);
            }
          // fall through
          case 137: break;
          case 62:
            { return symbolWithoutValue(SIN);
            }
          // fall through
          case 138: break;
          case 63:
            { return symbolWithoutValue(TAN);
            }
          // fall through
          case 139: break;
          case 64:
            { return symbolWithoutValue(CONTINUE);
            }
          // fall through
          case 140: break;
          case 65:
            { return symbolWithoutValue(FUNCTION);
            }
          // fall through
          case 141: break;
          case 66:
            { return symbolWithoutValue(PRINT_AST);
            }
          // fall through
          case 142: break;
          case 67:
            { return symbolWithoutValue(CEIL);
            }
          // fall through
          case 143: break;
          case 68:
            { return symbolWithoutValue(SQRT);
            }
          // fall through
          case 144: break;
          case 69:
            { return symbolWithoutValue(UNDEFINED);
            }
          // fall through
          case 145: break;
          case 70:
            { return symbolWithoutValue(SQRT_TWO);
            }
          // fall through
          case 146: break;
          case 71:
            { return symbolWithoutValue(FLOOR);
            }
          // fall through
          case 147: break;
          case 72:
            { return symbolWithoutValue(CONSOLE_LOG);
            }
          // fall through
          case 148: break;
          case 73:
            { return symbolWithoutValue(LOWER);
            }
          // fall through
          case 149: break;
          case 74:
            { return symbolWithoutValue(UPPER);
            }
          // fall through
          case 150: break;
          case 75:
            { return symbolWithoutValue(RANDOM);
            }
          // fall through
          case 151: break;
          case 76:
            { return symbolWithoutValue(SYMBOL_TABLE);
            }
          // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
