
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.typeSecure.compiler.parser;

import com.mio.typeSecure.compiler.Token;
import com.mio.typeSecure.compiler.lexer.TSLexer;
import com.mio.typeSecure.models.TSError;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.mio.typeSecure.models.instructions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TSParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public TSParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TSParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\006\005\000\002\006\003" +
    "\000\002\007\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\013\004\000\002" +
    "\013\003\000\002\013\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\012\013\000\002\012\012\000\002\045\004\000\002\045" +
    "\004\000\002\045\004\000\002\045\004\000\002\045\004" +
    "\000\002\045\002\000\002\016\011\000\002\016\012\000" +
    "\002\022\004\000\002\022\006\000\002\017\015\000\002" +
    "\017\015\000\002\023\003\000\002\023\003\000\002\024" +
    "\002\000\002\024\004\000\002\024\004\000\002\020\011" +
    "\000\002\021\013\000\002\014\004\000\002\005\010\000" +
    "\002\005\006\000\002\005\004\000\002\005\006\000\002" +
    "\011\004\000\002\011\002\000\002\050\003\000\002\050" +
    "\003\000\002\015\005\000\002\025\006\000\002\025\005" +
    "\000\002\025\006\000\002\025\005\000\002\025\003\000" +
    "\002\004\005\000\002\004\003\000\002\004\004\000\002" +
    "\026\006\000\002\026\004\000\002\040\003\000\002\041" +
    "\003\000\002\042\003\000\002\042\004\000\002\034\005" +
    "\000\002\034\003\000\002\035\005\000\002\035\003\000" +
    "\002\036\004\000\002\036\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\003\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\005\000\002\032\006\000\002\032" +
    "\004\000\002\032\004\000\002\032\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\005\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\046\003" +
    "\000\002\046\006\000\002\046\005\000\002\046\005\000" +
    "\002\046\006\000\002\046\004\000\002\043\006\000\002" +
    "\043\006\000\002\043\006\000\002\043\006\000\002\043" +
    "\006\000\002\043\006\000\002\043\006\000\002\043\006" +
    "\000\002\043\006\000\002\043\005\000\002\044\003\000" +
    "\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\070\002\ufffe\003\ufffe\016\ufffe\045\ufffe\046" +
    "\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076\ufffe\077\ufffe\100" +
    "\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe" +
    "\107\ufffe\114\ufffe\115\ufffe\001\002\000\004\002\u0117\001" +
    "\002\000\070\002\000\003\036\016\uffd8\045\013\046\050" +
    "\060\042\061\031\063\023\064\047\065\054\066\040\067" +
    "\020\070\007\071\035\075\011\076\053\077\037\100\046" +
    "\101\021\102\032\103\024\104\006\105\010\106\014\107" +
    "\034\114\033\115\041\001\002\000\004\013\u0114\001\002" +
    "\000\004\107\373\001\002\000\004\013\370\001\002\000" +
    "\004\013\365\001\002\000\072\002\ufff2\003\ufff2\016\ufff2" +
    "\034\ufff2\045\ufff2\046\ufff2\060\ufff2\061\ufff2\063\ufff2\064" +
    "\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\075\ufff2" +
    "\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\104" +
    "\ufff2\105\ufff2\106\ufff2\107\ufff2\114\ufff2\115\ufff2\001\002" +
    "\000\004\107\uffcb\001\002\000\004\013\363\001\002\000" +
    "\072\002\ufff5\003\ufff5\016\ufff5\034\ufff5\045\ufff5\046\ufff5" +
    "\060\ufff5\061\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067" +
    "\ufff5\070\ufff5\071\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5" +
    "\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107" +
    "\ufff5\114\ufff5\115\ufff5\001\002\000\072\002\ufff1\003\ufff1" +
    "\016\ufff1\034\ufff1\045\ufff1\046\ufff1\060\ufff1\061\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103" +
    "\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1\114\ufff1\115\ufff1" +
    "\001\002\000\004\107\343\001\002\000\004\016\uffbf\001" +
    "\002\000\004\013\340\001\002\000\004\016\337\001\002" +
    "\000\004\013\310\001\002\000\004\013\305\001\002\000" +
    "\004\016\304\001\002\000\004\016\303\001\002\000\004" +
    "\016\302\001\002\000\072\002\uffff\003\uffff\016\uffff\034" +
    "\uffff\045\uffff\046\uffff\060\uffff\061\uffff\063\uffff\064\uffff" +
    "\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff\075\uffff\076" +
    "\uffff\077\uffff\100\uffff\101\uffff\102\uffff\103\uffff\104\uffff" +
    "\105\uffff\106\uffff\107\uffff\114\uffff\115\uffff\001\002\000" +
    "\004\013\266\001\002\000\004\013\263\001\002\000\004" +
    "\013\260\001\002\000\012\004\255\005\254\013\201\026" +
    "\256\001\002\000\076\006\076\007\073\013\072\016\uffbd" +
    "\021\075\035\101\036\114\047\067\050\071\051\112\052" +
    "\102\072\074\073\070\074\066\075\011\076\053\077\037" +
    "\100\046\101\021\102\032\103\024\104\006\105\010\106" +
    "\014\107\077\110\113\111\100\112\104\114\033\115\041" +
    "\001\002\000\006\014\251\016\252\001\002\000\004\013" +
    "\246\001\002\000\004\016\uffbe\001\002\000\004\013\244" +
    "\001\002\000\004\013\241\001\002\000\004\016\240\001" +
    "\002\000\004\016\237\001\002\000\072\002\ufff0\003\ufff0" +
    "\016\ufff0\034\ufff0\045\ufff0\046\ufff0\060\ufff0\061\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103" +
    "\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\114\ufff0\115\ufff0" +
    "\001\002\000\004\013\234\001\002\000\004\013\226\001" +
    "\002\000\004\107\uffcc\001\002\000\004\016\225\001\002" +
    "\000\044\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\001\002\000" +
    "\004\013\222\001\002\000\004\033\060\001\002\000\004" +
    "\016\057\001\002\000\072\002\ufff3\003\ufff3\016\ufff3\034" +
    "\ufff3\045\ufff3\046\ufff3\060\ufff3\061\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\075\ufff3\076" +
    "\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3" +
    "\105\ufff3\106\ufff3\107\ufff3\114\ufff3\115\ufff3\001\002\000" +
    "\072\002\ufff6\003\ufff6\016\ufff6\034\ufff6\045\ufff6\046\ufff6" +
    "\060\ufff6\061\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\071\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6" +
    "\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107" +
    "\ufff6\114\ufff6\115\ufff6\001\002\000\070\003\ufffe\016\ufffe" +
    "\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\075\ufffe" +
    "\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104" +
    "\ufffe\105\ufffe\106\ufffe\107\ufffe\114\ufffe\115\ufffe\001\002" +
    "\000\070\003\036\016\uffd8\034\062\045\013\046\050\060" +
    "\042\061\031\063\023\064\047\065\054\066\040\067\020" +
    "\070\007\071\035\075\011\076\053\077\037\100\046\101" +
    "\021\102\032\103\024\104\006\105\010\106\014\107\034" +
    "\114\033\115\041\001\002\000\004\064\063\001\002\000" +
    "\004\013\064\001\002\000\074\006\076\007\073\013\072" +
    "\021\075\035\101\036\114\047\067\050\071\051\112\052" +
    "\102\072\074\073\070\074\066\075\011\076\053\077\037" +
    "\100\046\101\021\102\032\103\024\104\006\105\010\106" +
    "\014\107\077\110\113\111\100\112\104\114\033\115\041" +
    "\001\002\000\004\013\217\001\002\000\044\006\uff82\007" +
    "\uff82\010\uff82\011\uff82\012\uff82\014\uff82\016\uff82\017\uff82" +
    "\020\uff82\022\uff82\023\uff82\024\uff82\025\uff82\027\uff82\030" +
    "\uff82\031\uff82\032\uff82\001\002\000\004\013\uff98\001\002" +
    "\000\044\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\014" +
    "\uff83\016\uff83\017\uff83\020\uff83\022\uff83\023\uff83\024\uff83" +
    "\025\uff83\027\uff83\030\uff83\031\uff83\032\uff83\001\002\000" +
    "\004\013\uff97\001\002\000\074\006\076\007\073\013\072" +
    "\021\075\035\101\036\114\047\067\050\071\051\112\052" +
    "\102\072\074\073\070\074\066\075\011\076\053\077\037" +
    "\100\046\101\021\102\032\103\024\104\006\105\010\106" +
    "\014\107\077\110\113\111\100\112\104\114\033\115\041" +
    "\001\002\000\056\013\072\035\101\036\114\072\074\073" +
    "\070\074\066\075\011\076\053\077\037\100\046\101\021" +
    "\102\032\103\024\104\006\105\010\106\014\107\077\110" +
    "\113\111\100\112\104\114\033\115\041\001\002\000\044" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\014\uff84\016" +
    "\uff84\017\uff84\020\uff84\022\uff84\023\uff84\024\uff84\025\uff84" +
    "\027\uff84\030\uff84\031\uff84\032\uff84\001\002\000\072\006" +
    "\076\007\073\013\072\035\101\036\114\047\067\050\071" +
    "\051\112\052\102\072\074\073\070\074\066\075\011\076" +
    "\053\077\037\100\046\101\021\102\032\103\024\104\006" +
    "\105\010\106\014\107\077\110\113\111\100\112\104\114" +
    "\033\115\041\001\002\000\056\013\072\035\101\036\114" +
    "\072\074\073\070\074\066\075\011\076\053\077\037\100" +
    "\046\101\021\102\032\103\024\104\006\105\010\106\014" +
    "\107\077\110\113\111\100\112\104\114\033\115\041\001" +
    "\002\000\046\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\201\014\uff9c\016\uff9c\017\uff9c\020\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\001\002\000\044\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\014\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\001" +
    "\002\000\044\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f" +
    "\014\uff9f\016\uff9f\017\uff9f\020\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\001\002" +
    "\000\004\013\uff95\001\002\000\044\006\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\012\uff9b\014\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\001\002\000\044\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\014\uff9d\016\uff9d\017\uff9d\020\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\001\002\000\030\014\uffb6\016\uffb6\017\165\020" +
    "\171\022\172\023\167\024\170\025\166\027\uffb6\030\uffb6" +
    "\031\uffb6\001\002\000\014\014\uffb8\016\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\001\002\000\014\014\uffba\016\uffba\027\162" +
    "\030\uffba\031\uffba\001\002\000\044\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\001\002\000\006\014\157\030\160\001\002" +
    "\000\004\013\uff96\001\002\000\044\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\001\002\000\044\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\001\002\000\044\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\014\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\001\002\000\044\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\032\134" +
    "\001\002\000\042\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8\001\002\000" +
    "\042\006\uffac\007\uffac\010\127\011\126\012\125\014\uffac" +
    "\016\uffac\017\uffac\020\uffac\022\uffac\023\uffac\024\uffac\025" +
    "\uffac\027\uffac\030\uffac\031\uffac\001\002\000\034\006\122" +
    "\007\123\014\uffaf\016\uffaf\017\uffaf\020\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\001\002" +
    "\000\072\006\076\007\073\013\072\035\101\036\114\047" +
    "\067\050\071\051\112\052\102\072\074\073\070\074\066" +
    "\075\011\076\053\077\037\100\046\101\021\102\032\103" +
    "\024\104\006\105\010\106\014\107\077\110\113\111\100" +
    "\112\104\114\033\115\041\001\002\000\072\006\076\007" +
    "\073\013\072\035\101\036\114\047\067\050\071\051\112" +
    "\052\102\072\074\073\070\074\066\075\011\076\053\077" +
    "\037\100\046\101\021\102\032\103\024\104\006\105\010" +
    "\106\014\107\077\110\113\111\100\112\104\114\033\115" +
    "\041\001\002\000\042\006\uffad\007\uffad\010\127\011\126" +
    "\012\125\014\uffad\016\uffad\017\uffad\020\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\027\uffad\030\uffad\031\uffad\001\002" +
    "\000\072\006\076\007\073\013\072\035\101\036\114\047" +
    "\067\050\071\051\112\052\102\072\074\073\070\074\066" +
    "\075\011\076\053\077\037\100\046\101\021\102\032\103" +
    "\024\104\006\105\010\106\014\107\077\110\113\111\100" +
    "\112\104\114\033\115\041\001\002\000\072\006\076\007" +
    "\073\013\072\035\101\036\114\047\067\050\071\051\112" +
    "\052\102\072\074\073\070\074\066\075\011\076\053\077" +
    "\037\100\046\101\021\102\032\103\024\104\006\105\010" +
    "\106\014\107\077\110\113\111\100\112\104\114\033\115" +
    "\041\001\002\000\072\006\076\007\073\013\072\035\101" +
    "\036\114\047\067\050\071\051\112\052\102\072\074\073" +
    "\070\074\066\075\011\076\053\077\037\100\046\101\021" +
    "\102\032\103\024\104\006\105\010\106\014\107\077\110" +
    "\113\111\100\112\104\114\033\115\041\001\002\000\042" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\014\uffab\016" +
    "\uffab\017\uffab\020\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\027\uffab\030\uffab\031\uffab\001\002\000\042\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\001\002\000\042\006\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\001\002\000\042\006\uffae\007\uffae\010\127\011\126\012" +
    "\125\014\uffae\016\uffae\017\uffae\020\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae\001\002\000" +
    "\016\003\136\053\142\054\137\055\135\056\143\057\141" +
    "\001\002\000\004\013\155\001\002\000\004\014\154\001" +
    "\002\000\004\013\151\001\002\000\042\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\014\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\001\002\000\004\013\146\001\002\000\042\006" +
    "\uff94\007\uff94\010\uff94\011\uff94\012\uff94\014\uff94\016\uff94" +
    "\017\uff94\020\uff94\022\uff94\023\uff94\024\uff94\025\uff94\027" +
    "\uff94\030\uff94\031\uff94\001\002\000\004\013\144\001\002" +
    "\000\004\014\145\001\002\000\042\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\014\uff91\016\uff91\017\uff91\020\uff91" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\027\uff91\030\uff91\031" +
    "\uff91\001\002\000\072\006\076\007\073\013\072\035\101" +
    "\036\114\047\067\050\071\051\112\052\102\072\074\073" +
    "\070\074\066\075\011\076\053\077\037\100\046\101\021" +
    "\102\032\103\024\104\006\105\010\106\014\107\077\110" +
    "\113\111\100\112\104\114\033\115\041\001\002\000\010" +
    "\006\122\007\123\014\150\001\002\000\042\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\014\uff90\016\uff90\017\uff90" +
    "\020\uff90\022\uff90\023\uff90\024\uff90\025\uff90\027\uff90\030" +
    "\uff90\031\uff90\001\002\000\072\006\076\007\073\013\072" +
    "\035\101\036\114\047\067\050\071\051\112\052\102\072" +
    "\074\073\070\074\066\075\011\076\053\077\037\100\046" +
    "\101\021\102\032\103\024\104\006\105\010\106\014\107" +
    "\077\110\113\111\100\112\104\114\033\115\041\001\002" +
    "\000\010\006\122\007\123\014\153\001\002\000\042\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\014\uff93\016\uff93" +
    "\017\uff93\020\uff93\022\uff93\023\uff93\024\uff93\025\uff93\027" +
    "\uff93\030\uff93\031\uff93\001\002\000\042\006\uff8f\007\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\014\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\001\002\000\004\014\156\001\002\000\042\006" +
    "\uff92\007\uff92\010\uff92\011\uff92\012\uff92\014\uff92\016\uff92" +
    "\017\uff92\020\uff92\022\uff92\023\uff92\024\uff92\025\uff92\027" +
    "\uff92\030\uff92\031\uff92\001\002\000\004\016\164\001\002" +
    "\000\074\006\076\007\073\013\072\021\075\035\101\036" +
    "\114\047\067\050\071\051\112\052\102\072\074\073\070" +
    "\074\066\075\011\076\053\077\037\100\046\101\021\102" +
    "\032\103\024\104\006\105\010\106\014\107\077\110\113" +
    "\111\100\112\104\114\033\115\041\001\002\000\014\014" +
    "\uffbb\016\uffbb\027\162\030\uffbb\031\uffbb\001\002\000\074" +
    "\006\076\007\073\013\072\021\075\035\101\036\114\047" +
    "\067\050\071\051\112\052\102\072\074\073\070\074\066" +
    "\075\011\076\053\077\037\100\046\101\021\102\032\103" +
    "\024\104\006\105\010\106\014\107\077\110\113\111\100" +
    "\112\104\114\033\115\041\001\002\000\014\014\uffb9\016" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\001\002\000\072\002\uffd4" +
    "\003\uffd4\016\uffd4\034\uffd4\045\uffd4\046\uffd4\060\uffd4\061" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4" +
    "\071\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102" +
    "\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\114\uffd4" +
    "\115\uffd4\001\002\000\072\006\076\007\073\013\072\035" +
    "\101\036\114\047\067\050\071\051\112\052\102\072\074" +
    "\073\070\074\066\075\011\076\053\077\037\100\046\101" +
    "\021\102\032\103\024\104\006\105\010\106\014\107\077" +
    "\110\113\111\100\112\104\114\033\115\041\001\002\000" +
    "\072\006\076\007\073\013\072\035\101\036\114\047\067" +
    "\050\071\051\112\052\102\072\074\073\070\074\066\075" +
    "\011\076\053\077\037\100\046\101\021\102\032\103\024" +
    "\104\006\105\010\106\014\107\077\110\113\111\100\112" +
    "\104\114\033\115\041\001\002\000\072\006\076\007\073" +
    "\013\072\035\101\036\114\047\067\050\071\051\112\052" +
    "\102\072\074\073\070\074\066\075\011\076\053\077\037" +
    "\100\046\101\021\102\032\103\024\104\006\105\010\106" +
    "\014\107\077\110\113\111\100\112\104\114\033\115\041" +
    "\001\002\000\072\006\076\007\073\013\072\035\101\036" +
    "\114\047\067\050\071\051\112\052\102\072\074\073\070" +
    "\074\066\075\011\076\053\077\037\100\046\101\021\102" +
    "\032\103\024\104\006\105\010\106\014\107\077\110\113" +
    "\111\100\112\104\114\033\115\041\001\002\000\072\006" +
    "\076\007\073\013\072\035\101\036\114\047\067\050\071" +
    "\051\112\052\102\072\074\073\070\074\066\075\011\076" +
    "\053\077\037\100\046\101\021\102\032\103\024\104\006" +
    "\105\010\106\014\107\077\110\113\111\100\112\104\114" +
    "\033\115\041\001\002\000\072\006\076\007\073\013\072" +
    "\035\101\036\114\047\067\050\071\051\112\052\102\072" +
    "\074\073\070\074\066\075\011\076\053\077\037\100\046" +
    "\101\021\102\032\103\024\104\006\105\010\106\014\107" +
    "\077\110\113\111\100\112\104\114\033\115\041\001\002" +
    "\000\034\006\122\007\123\014\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\001\002\000\034\006\122\007\123\014\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\001\002\000\034\006\122\007" +
    "\123\014\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\001\002\000" +
    "\034\006\122\007\123\014\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\001\002\000\034\006\122\007\123\014\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\001\002\000\034\006\122\007\123" +
    "\014\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\001\002\000\100" +
    "\003\203\006\076\007\073\013\072\014\202\021\075\035" +
    "\101\036\114\047\067\050\071\051\112\052\102\072\074" +
    "\073\070\074\066\075\011\076\053\077\037\100\046\101" +
    "\021\102\032\103\024\104\006\105\010\106\014\107\077" +
    "\110\113\111\100\112\104\114\033\115\041\001\002\000" +
    "\044\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\001\002\000\004" +
    "\031\211\001\002\000\010\014\uffc3\030\160\031\uffc3\001" +
    "\002\000\006\014\207\031\206\001\002\000\074\006\076" +
    "\007\073\013\072\021\075\035\101\036\114\047\067\050" +
    "\071\051\112\052\102\072\074\073\070\074\066\075\011" +
    "\076\053\077\037\100\046\101\021\102\032\103\024\104" +
    "\006\105\010\106\014\107\077\110\113\111\100\112\104" +
    "\114\033\115\041\001\002\000\044\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\001\002\000\010\014\uffc4\030\160\031\uffc4" +
    "\001\002\000\006\014\uffc2\031\uffc2\001\002\000\044\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\001\002\000\030\014\uffb7" +
    "\016\uffb7\017\165\020\171\022\172\023\167\024\170\025" +
    "\166\027\uffb7\030\uffb7\031\uffb7\001\002\000\044\006\uffa4" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\014\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\001\002\000\006\014\216\030" +
    "\160\001\002\000\044\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\014\uff99\016\uff99\017\uff99\020\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\001\002\000\074\006\076\007\073\013\072\021\075\035" +
    "\101\036\114\047\067\050\071\051\112\052\102\072\074" +
    "\073\070\074\066\075\011\076\053\077\037\100\046\101" +
    "\021\102\032\103\024\104\006\105\010\106\014\107\077" +
    "\110\113\111\100\112\104\114\033\115\041\001\002\000" +
    "\006\014\221\030\160\001\002\000\044\006\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\014\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\001\002\000\076\003\203\006\076\007" +
    "\073\013\072\021\075\035\101\036\114\047\067\050\071" +
    "\051\112\052\102\072\074\073\070\074\066\075\011\076" +
    "\053\077\037\100\046\101\021\102\032\103\024\104\006" +
    "\105\010\106\014\107\077\110\113\111\100\112\104\114" +
    "\033\115\041\001\002\000\006\014\224\031\206\001\002" +
    "\000\044\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\014" +
    "\uff8d\016\uff8d\017\uff8d\020\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\001\002\000" +
    "\072\002\uffea\003\uffea\016\uffea\034\uffea\045\uffea\046\uffea" +
    "\060\uffea\061\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\075\uffea\076\uffea\077\uffea\100\uffea" +
    "\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea\107" +
    "\uffea\114\uffea\115\uffea\001\002\000\074\006\076\007\073" +
    "\013\072\021\075\035\101\036\114\047\067\050\071\051" +
    "\112\052\102\072\074\073\070\074\066\075\011\076\053" +
    "\077\037\100\046\101\021\102\032\103\024\104\006\105" +
    "\010\106\014\107\077\110\113\111\100\112\104\114\033" +
    "\115\041\001\002\000\006\014\230\030\160\001\002\000" +
    "\004\033\231\001\002\000\070\003\ufffe\016\ufffe\034\ufffe" +
    "\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105" +
    "\ufffe\106\ufffe\107\ufffe\114\ufffe\115\ufffe\001\002\000\070" +
    "\003\036\016\uffd8\034\233\045\013\046\050\060\042\061" +
    "\031\063\023\064\047\065\054\066\040\067\020\070\007" +
    "\071\035\075\011\076\053\077\037\100\046\101\021\102" +
    "\032\103\024\104\006\105\010\106\014\107\034\114\033" +
    "\115\041\001\002\000\072\002\uffd5\003\uffd5\016\uffd5\034" +
    "\uffd5\045\uffd5\046\uffd5\060\uffd5\061\uffd5\063\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\075\uffd5\076" +
    "\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5" +
    "\105\uffd5\106\uffd5\107\uffd5\114\uffd5\115\uffd5\001\002\000" +
    "\076\003\203\006\076\007\073\013\072\021\075\035\101" +
    "\036\114\047\067\050\071\051\112\052\102\072\074\073" +
    "\070\074\066\075\011\076\053\077\037\100\046\101\021" +
    "\102\032\103\024\104\006\105\010\106\014\107\077\110" +
    "\113\111\100\112\104\114\033\115\041\001\002\000\006" +
    "\014\236\031\206\001\002\000\044\006\uff8b\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\014\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\025\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\001\002\000\072\002\uffeb\003\uffeb\016\uffeb" +
    "\034\uffeb\045\uffeb\046\uffeb\060\uffeb\061\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\075\uffeb" +
    "\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104" +
    "\uffeb\105\uffeb\106\uffeb\107\uffeb\114\uffeb\115\uffeb\001\002" +
    "\000\072\002\uffee\003\uffee\016\uffee\034\uffee\045\uffee\046" +
    "\uffee\060\uffee\061\uffee\063\uffee\064\uffee\065\uffee\066\uffee" +
    "\067\uffee\070\uffee\071\uffee\075\uffee\076\uffee\077\uffee\100" +
    "\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee" +
    "\107\uffee\114\uffee\115\uffee\001\002\000\076\003\203\006" +
    "\076\007\073\013\072\021\075\035\101\036\114\047\067" +
    "\050\071\051\112\052\102\072\074\073\070\074\066\075" +
    "\011\076\053\077\037\100\046\101\021\102\032\103\024" +
    "\104\006\105\010\106\014\107\077\110\113\111\100\112" +
    "\104\114\033\115\041\001\002\000\006\014\243\031\206" +
    "\001\002\000\004\016\uffc1\001\002\000\004\014\245\001" +
    "\002\000\044\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\014\uffc6\016\uffc6\017\uffc6\020\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\001\002" +
    "\000\076\003\203\006\076\007\073\013\072\021\075\035" +
    "\101\036\114\047\067\050\071\051\112\052\102\072\074" +
    "\073\070\074\066\075\011\076\053\077\037\100\046\101" +
    "\021\102\032\103\024\104\006\105\010\106\014\107\077" +
    "\110\113\111\100\112\104\114\033\115\041\001\002\000" +
    "\006\014\250\031\206\001\002\000\044\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\014\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\001\002\000\004\016\uffc0\001\002\000" +
    "\072\002\uffe9\003\uffe9\016\uffe9\034\uffe9\045\uffe9\046\uffe9" +
    "\060\uffe9\061\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\071\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9" +
    "\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107" +
    "\uffe9\114\uffe9\115\uffe9\001\002\000\006\016\uffbc\030\160" +
    "\001\002\000\006\014\uffd6\016\uffd6\001\002\000\006\014" +
    "\uffd7\016\uffd7\001\002\000\074\006\076\007\073\013\072" +
    "\021\075\035\101\036\114\047\067\050\071\051\112\052" +
    "\102\072\074\073\070\074\066\075\011\076\053\077\037" +
    "\100\046\101\021\102\032\103\024\104\006\105\010\106" +
    "\014\107\077\110\113\111\100\112\104\114\033\115\041" +
    "\001\002\000\010\014\uffca\016\uffca\030\160\001\002\000" +
    "\074\006\076\007\073\013\072\021\075\035\101\036\114" +
    "\047\067\050\071\051\112\052\102\072\074\073\070\074" +
    "\066\075\011\076\053\077\037\100\046\101\021\102\032" +
    "\103\024\104\006\105\010\106\014\107\077\110\113\111" +
    "\100\112\104\114\033\115\041\001\002\000\006\014\262" +
    "\030\160\001\002\000\044\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\001\002\000\076\003\203\006\076\007\073\013\072" +
    "\021\075\035\101\036\114\047\067\050\071\051\112\052" +
    "\102\072\074\073\070\074\066\075\011\076\053\077\037" +
    "\100\046\101\021\102\032\103\024\104\006\105\010\106" +
    "\014\107\077\110\113\111\100\112\104\114\033\115\041" +
    "\001\002\000\006\014\265\031\206\001\002\000\044\006" +
    "\uff89\007\uff89\010\uff89\011\uff89\012\uff89\014\uff89\016\uff89" +
    "\017\uff89\020\uff89\022\uff89\023\uff89\024\uff89\025\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\001\002\000\074\006\076" +
    "\007\073\013\072\021\075\035\101\036\114\047\067\050" +
    "\071\051\112\052\102\072\074\073\070\074\066\075\011" +
    "\076\053\077\037\100\046\101\021\102\032\103\024\104" +
    "\006\105\010\106\014\107\077\110\113\111\100\112\104" +
    "\114\033\115\041\001\002\000\006\014\270\030\160\001" +
    "\002\000\004\033\271\001\002\000\070\003\ufffe\016\ufffe" +
    "\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\075\ufffe" +
    "\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104" +
    "\ufffe\105\ufffe\106\ufffe\107\ufffe\114\ufffe\115\ufffe\001\002" +
    "\000\070\003\036\016\uffd8\034\273\045\013\046\050\060" +
    "\042\061\031\063\023\064\047\065\054\066\040\067\020" +
    "\070\007\071\035\075\011\076\053\077\037\100\046\101" +
    "\021\102\032\103\024\104\006\105\010\106\014\107\034" +
    "\114\033\115\041\001\002\000\074\002\uffe0\003\uffe0\016" +
    "\uffe0\034\uffe0\045\uffe0\046\uffe0\060\uffe0\061\uffe0\062\274" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0" +
    "\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\114\uffe0\115" +
    "\uffe0\001\002\000\006\033\276\061\031\001\002\000\072" +
    "\002\uffdf\003\uffdf\016\uffdf\034\uffdf\045\uffdf\046\uffdf\060" +
    "\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\070\uffdf\071\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf" +
    "\114\uffdf\115\uffdf\001\002\000\070\003\ufffe\016\ufffe\034" +
    "\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076" +
    "\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe" +
    "\105\ufffe\106\ufffe\107\ufffe\114\ufffe\115\ufffe\001\002\000" +
    "\072\002\uffde\003\uffde\016\uffde\034\uffde\045\uffde\046\uffde" +
    "\060\uffde\061\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\075\uffde\076\uffde\077\uffde\100\uffde" +
    "\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106\uffde\107" +
    "\uffde\114\uffde\115\uffde\001\002\000\070\003\036\016\uffd8" +
    "\034\301\045\013\046\050\060\042\061\031\063\023\064" +
    "\047\065\054\066\040\067\020\070\007\071\035\075\011" +
    "\076\053\077\037\100\046\101\021\102\032\103\024\104" +
    "\006\105\010\106\014\107\034\114\033\115\041\001\002" +
    "\000\072\002\uffdd\003\uffdd\016\uffdd\034\uffdd\045\uffdd\046" +
    "\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\075\uffdd\076\uffdd\077\uffdd\100" +
    "\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd" +
    "\107\uffdd\114\uffdd\115\uffdd\001\002\000\072\002\uffed\003" +
    "\uffed\016\uffed\034\uffed\045\uffed\046\uffed\060\uffed\061\uffed" +
    "\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071" +
    "\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed" +
    "\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\114\uffed\115" +
    "\uffed\001\002\000\072\002\uffef\003\uffef\016\uffef\034\uffef" +
    "\045\uffef\046\uffef\060\uffef\061\uffef\063\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\070\uffef\071\uffef\075\uffef\076\uffef" +
    "\077\uffef\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef\105" +
    "\uffef\106\uffef\107\uffef\114\uffef\115\uffef\001\002\000\072" +
    "\002\uffec\003\uffec\016\uffec\034\uffec\045\uffec\046\uffec\060" +
    "\uffec\061\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101" +
    "\uffec\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec" +
    "\114\uffec\115\uffec\001\002\000\076\003\203\006\076\007" +
    "\073\013\072\021\075\035\101\036\114\047\067\050\071" +
    "\051\112\052\102\072\074\073\070\074\066\075\011\076" +
    "\053\077\037\100\046\101\021\102\032\103\024\104\006" +
    "\105\010\106\014\107\077\110\113\111\100\112\104\114" +
    "\033\115\041\001\002\000\006\014\307\031\206\001\002" +
    "\000\044\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\014" +
    "\uff88\016\uff88\017\uff88\020\uff88\022\uff88\023\uff88\024\uff88" +
    "\025\uff88\027\uff88\030\uff88\031\uff88\032\uff88\001\002\000" +
    "\010\045\013\046\050\107\311\001\002\000\004\026\256" +
    "\001\002\000\004\016\327\001\002\000\004\016\314\001" +
    "\002\000\074\006\076\007\073\013\072\021\075\035\101" +
    "\036\114\047\067\050\071\051\112\052\102\072\074\073" +
    "\070\074\066\075\011\076\053\077\037\100\046\101\021" +
    "\102\032\103\024\104\006\105\010\106\014\107\077\110" +
    "\113\111\100\112\104\114\033\115\041\001\002\000\006" +
    "\016\316\030\160\001\002\000\006\014\uffd8\107\317\001" +
    "\002\000\010\004\255\005\254\026\256\001\002\000\004" +
    "\014\uffda\001\002\000\004\014\uffd9\001\002\000\004\014" +
    "\323\001\002\000\004\033\324\001\002\000\070\003\ufffe" +
    "\016\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103" +
    "\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe\114\ufffe\115\ufffe" +
    "\001\002\000\070\003\036\016\uffd8\034\326\045\013\046" +
    "\050\060\042\061\031\063\023\064\047\065\054\066\040" +
    "\067\020\070\007\071\035\075\011\076\053\077\037\100" +
    "\046\101\021\102\032\103\024\104\006\105\010\106\014" +
    "\107\034\114\033\115\041\001\002\000\072\002\uffdc\003" +
    "\uffdc\016\uffdc\034\uffdc\045\uffdc\046\uffdc\060\uffdc\061\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc" +
    "\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\114\uffdc\115" +
    "\uffdc\001\002\000\074\006\076\007\073\013\072\021\075" +
    "\035\101\036\114\047\067\050\071\051\112\052\102\072" +
    "\074\073\070\074\066\075\011\076\053\077\037\100\046" +
    "\101\021\102\032\103\024\104\006\105\010\106\014\107" +
    "\077\110\113\111\100\112\104\114\033\115\041\001\002" +
    "\000\006\016\331\030\160\001\002\000\006\014\uffd8\107" +
    "\317\001\002\000\004\014\333\001\002\000\004\033\334" +
    "\001\002\000\070\003\ufffe\016\ufffe\034\ufffe\045\ufffe\046" +
    "\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076\ufffe\077\ufffe\100" +
    "\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe" +
    "\107\ufffe\114\ufffe\115\ufffe\001\002\000\070\003\036\016" +
    "\uffd8\034\336\045\013\046\050\060\042\061\031\063\023" +
    "\064\047\065\054\066\040\067\020\070\007\071\035\075" +
    "\011\076\053\077\037\100\046\101\021\102\032\103\024" +
    "\104\006\105\010\106\014\107\034\114\033\115\041\001" +
    "\002\000\072\002\uffdb\003\uffdb\016\uffdb\034\uffdb\045\uffdb" +
    "\046\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106" +
    "\uffdb\107\uffdb\114\uffdb\115\uffdb\001\002\000\072\002\ufff4" +
    "\003\ufff4\016\ufff4\034\ufff4\045\ufff4\046\ufff4\060\ufff4\061" +
    "\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102" +
    "\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\114\ufff4" +
    "\115\ufff4\001\002\000\076\003\203\006\076\007\073\013" +
    "\072\021\075\035\101\036\114\047\067\050\071\051\112" +
    "\052\102\072\074\073\070\074\066\075\011\076\053\077" +
    "\037\100\046\101\021\102\032\103\024\104\006\105\010" +
    "\106\014\107\077\110\113\111\100\112\104\114\033\115" +
    "\041\001\002\000\006\014\342\031\206\001\002\000\044" +
    "\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\014\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\001\002\000\012\015" +
    "\350\016\uffcd\026\uffcd\031\uffcd\001\002\000\006\016\uffd3" +
    "\031\345\001\002\000\004\107\346\001\002\000\012\015" +
    "\350\016\uffcd\026\uffcd\031\uffcd\001\002\000\010\016\uffd1" +
    "\026\356\031\uffd1\001\002\000\012\037\353\040\352\041" +
    "\351\042\355\001\002\000\012\014\ufff8\016\ufff8\026\ufff8" +
    "\031\ufff8\001\002\000\012\014\ufff9\016\ufff9\026\ufff9\031" +
    "\ufff9\001\002\000\012\014\ufffa\016\ufffa\026\ufffa\031\ufffa" +
    "\001\002\000\010\016\uffce\026\uffce\031\uffce\001\002\000" +
    "\012\014\ufff7\016\ufff7\026\ufff7\031\ufff7\001\002\000\074" +
    "\006\076\007\073\013\072\021\075\035\101\036\114\047" +
    "\067\050\071\051\112\052\102\072\074\073\070\074\066" +
    "\075\011\076\053\077\037\100\046\101\021\102\032\103" +
    "\024\104\006\105\010\106\014\107\077\110\113\111\100" +
    "\112\104\114\033\115\041\001\002\000\010\016\uffd2\030" +
    "\160\031\uffd2\001\002\000\010\016\uffd0\026\361\031\uffd0" +
    "\001\002\000\074\006\076\007\073\013\072\021\075\035" +
    "\101\036\114\047\067\050\071\051\112\052\102\072\074" +
    "\073\070\074\066\075\011\076\053\077\037\100\046\101" +
    "\021\102\032\103\024\104\006\105\010\106\014\107\077" +
    "\110\113\111\100\112\104\114\033\115\041\001\002\000" +
    "\010\016\uffcf\030\160\031\uffcf\001\002\000\004\014\364" +
    "\001\002\000\044\006\uff85\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\014\uff85\016\uff85\017\uff85\020\uff85\022\uff85\023\uff85" +
    "\024\uff85\025\uff85\027\uff85\030\uff85\031\uff85\032\uff85\001" +
    "\002\000\076\003\203\006\076\007\073\013\072\021\075" +
    "\035\101\036\114\047\067\050\071\051\112\052\102\072" +
    "\074\073\070\074\066\075\011\076\053\077\037\100\046" +
    "\101\021\102\032\103\024\104\006\105\010\106\014\107" +
    "\077\110\113\111\100\112\104\114\033\115\041\001\002" +
    "\000\006\014\367\031\206\001\002\000\044\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\001\002\000\076\003\203\006\076" +
    "\007\073\013\072\021\075\035\101\036\114\047\067\050" +
    "\071\051\112\052\102\072\074\073\070\074\066\075\011" +
    "\076\053\077\037\100\046\101\021\102\032\103\024\104" +
    "\006\105\010\106\014\107\077\110\113\111\100\112\104" +
    "\114\033\115\041\001\002\000\006\014\372\031\206\001" +
    "\002\000\044\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\014\uff86\016\uff86\017\uff86\020\uff86\022\uff86\023\uff86\024" +
    "\uff86\025\uff86\027\uff86\030\uff86\031\uff86\032\uff86\001\002" +
    "\000\004\013\374\001\002\000\006\014\376\107\375\001" +
    "\002\000\004\015\u0112\001\002\000\006\015\u0104\033\uffe1" +
    "\001\002\000\006\014\u0102\031\u0101\001\002\000\006\014" +
    "\ufffc\031\ufffc\001\002\000\004\107\375\001\002\000\006" +
    "\015\u0104\033\uffe1\001\002\000\004\033\u010a\001\002\000" +
    "\014\037\u0107\040\u0106\041\u0105\042\u0108\043\u0109\001\002" +
    "\000\004\033\uffe3\001\002\000\004\033\uffe4\001\002\000" +
    "\004\033\uffe5\001\002\000\004\033\uffe2\001\002\000\004" +
    "\033\uffe6\001\002\000\070\003\ufffe\016\ufffe\034\ufffe\045" +
    "\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076\ufffe\077" +
    "\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe" +
    "\106\ufffe\107\ufffe\114\ufffe\115\ufffe\001\002\000\070\003" +
    "\036\016\uffd8\034\u010c\045\013\046\050\060\042\061\031" +
    "\063\023\064\047\065\054\066\040\067\020\070\007\071" +
    "\035\075\011\076\053\077\037\100\046\101\021\102\032" +
    "\103\024\104\006\105\010\106\014\107\034\114\033\115" +
    "\041\001\002\000\072\002\uffe8\003\uffe8\016\uffe8\034\uffe8" +
    "\045\uffe8\046\uffe8\060\uffe8\061\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\075\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105" +
    "\uffe8\106\uffe8\107\uffe8\114\uffe8\115\uffe8\001\002\000\006" +
    "\014\ufffd\031\ufffd\001\002\000\004\033\u010f\001\002\000" +
    "\070\003\ufffe\016\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe" +
    "\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070" +
    "\ufffe\071\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe" +
    "\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe\114" +
    "\ufffe\115\ufffe\001\002\000\070\003\036\016\uffd8\034\u0111" +
    "\045\013\046\050\060\042\061\031\063\023\064\047\065" +
    "\054\066\040\067\020\070\007\071\035\075\011\076\053" +
    "\077\037\100\046\101\021\102\032\103\024\104\006\105" +
    "\010\106\014\107\034\114\033\115\041\001\002\000\072" +
    "\002\uffe7\003\uffe7\016\uffe7\034\uffe7\045\uffe7\046\uffe7\060" +
    "\uffe7\061\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\071\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101" +
    "\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7" +
    "\114\uffe7\115\uffe7\001\002\000\012\037\353\040\352\041" +
    "\351\042\355\001\002\000\006\014\ufffb\031\ufffb\001\002" +
    "\000\076\003\203\006\076\007\073\013\072\021\075\035" +
    "\101\036\114\047\067\050\071\051\112\052\102\072\074" +
    "\073\070\074\066\075\011\076\053\077\037\100\046\101" +
    "\021\102\032\103\024\104\006\105\010\106\014\107\077" +
    "\110\113\111\100\112\104\114\033\115\041\001\002\000" +
    "\006\014\u0116\031\206\001\002\000\044\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\014\uff87\016\uff87\017\uff87\020" +
    "\uff87\022\uff87\023\uff87\024\uff87\025\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\042\012\014\013\027\014\054\015\021\016\055" +
    "\017\011\020\015\021\044\024\025\025\042\026\026\040" +
    "\024\041\043\042\050\043\051\050\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\025\102\027\120\030\117\031\116\032\115" +
    "\033\114\034\252\035\106\036\105\037\104\043\051\044" +
    "\107\047\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\060\001\001\000\042\012\014\013\027\014\054" +
    "\015\021\016\055\017\011\020\015\021\044\024\025\025" +
    "\042\026\026\040\024\041\043\042\050\043\051\050\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\025" +
    "\102\027\120\030\117\031\116\032\115\033\114\034\110" +
    "\035\106\036\105\037\104\043\051\044\107\047\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\025\102\027" +
    "\120\030\117\031\116\032\115\033\114\034\214\035\106" +
    "\036\105\037\104\043\051\044\107\047\064\001\001\000" +
    "\012\025\102\033\213\043\051\044\107\001\001\000\002" +
    "\001\001\000\026\025\102\027\120\030\117\031\116\032" +
    "\115\033\114\037\212\043\051\044\107\047\064\001\001" +
    "\000\012\025\102\033\211\043\051\044\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\025" +
    "\102\030\132\031\116\032\115\033\114\043\051\044\107" +
    "\047\064\001\001\000\022\025\102\030\123\031\116\032" +
    "\115\033\114\043\051\044\107\047\064\001\001\000\002" +
    "\001\001\000\020\025\102\031\131\032\115\033\114\043" +
    "\051\044\107\047\064\001\001\000\020\025\102\031\130" +
    "\032\115\033\114\043\051\044\107\047\064\001\001\000" +
    "\020\025\102\031\127\032\115\033\114\043\051\044\107" +
    "\047\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\025" +
    "\102\027\146\030\117\031\116\032\115\033\114\043\051" +
    "\044\107\047\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\025\102\027\151\030\117\031\116\032\115" +
    "\033\114\043\051\044\107\047\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\025\102\027" +
    "\120\030\117\031\116\032\115\033\114\035\160\036\105" +
    "\037\104\043\051\044\107\047\064\001\001\000\002\001" +
    "\001\000\030\025\102\027\120\030\117\031\116\032\115" +
    "\033\114\036\162\037\104\043\051\044\107\047\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\102" +
    "\027\177\030\117\031\116\032\115\033\114\043\051\044" +
    "\107\047\064\001\001\000\024\025\102\027\176\030\117" +
    "\031\116\032\115\033\114\043\051\044\107\047\064\001" +
    "\001\000\024\025\102\027\175\030\117\031\116\032\115" +
    "\033\114\043\051\044\107\047\064\001\001\000\024\025" +
    "\102\027\174\030\117\031\116\032\115\033\114\043\051" +
    "\044\107\047\064\001\001\000\024\025\102\027\173\030" +
    "\117\031\116\032\115\033\114\043\051\044\107\047\064" +
    "\001\001\000\024\025\102\027\172\030\117\031\116\032" +
    "\115\033\114\043\051\044\107\047\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\204" +
    "\025\102\027\120\030\117\031\116\032\115\033\114\034" +
    "\203\035\106\036\105\037\104\043\051\044\107\047\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\025\102\027\120\030\117" +
    "\031\116\032\115\033\114\034\207\035\106\036\105\037" +
    "\104\043\051\044\107\047\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\025\102\027\120\030\117\031\116\032" +
    "\115\033\114\034\217\035\106\036\105\037\104\043\051" +
    "\044\107\047\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\222\025\102\027\120\030\117\031\116" +
    "\032\115\033\114\034\203\035\106\036\105\037\104\043" +
    "\051\044\107\047\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\025\102\027\120\030" +
    "\117\031\116\032\115\033\114\034\226\035\106\036\105" +
    "\037\104\043\051\044\107\047\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\231\001\001\000\042" +
    "\012\014\013\027\014\054\015\021\016\055\017\011\020" +
    "\015\021\044\024\025\025\042\026\026\040\024\041\043" +
    "\042\050\043\051\050\016\001\001\000\002\001\001\000" +
    "\036\004\234\025\102\027\120\030\117\031\116\032\115" +
    "\033\114\034\203\035\106\036\105\037\104\043\051\044" +
    "\107\047\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\241\025" +
    "\102\027\120\030\117\031\116\032\115\033\114\034\203" +
    "\035\106\036\105\037\104\043\051\044\107\047\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\246\025\102\027\120\030" +
    "\117\031\116\032\115\033\114\034\203\035\106\036\105" +
    "\037\104\043\051\044\107\047\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\025\102\027\120\030\117\031\116\032\115\033\114" +
    "\034\256\035\106\036\105\037\104\043\051\044\107\047" +
    "\064\001\001\000\002\001\001\000\034\025\102\027\120" +
    "\030\117\031\116\032\115\033\114\034\260\035\106\036" +
    "\105\037\104\043\051\044\107\047\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\263\025\102\027" +
    "\120\030\117\031\116\032\115\033\114\034\203\035\106" +
    "\036\105\037\104\043\051\044\107\047\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\025\102\027\120" +
    "\030\117\031\116\032\115\033\114\034\266\035\106\036" +
    "\105\037\104\043\051\044\107\047\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\271\001\001\000" +
    "\042\012\014\013\027\014\054\015\021\016\055\017\011" +
    "\020\015\021\044\024\025\025\042\026\026\040\024\041" +
    "\043\042\050\043\051\050\016\001\001\000\004\022\274" +
    "\001\001\000\004\016\276\001\001\000\002\001\001\000" +
    "\004\003\277\001\001\000\002\001\001\000\042\012\014" +
    "\013\027\014\054\015\021\016\055\017\011\020\015\021" +
    "\044\024\025\025\042\026\026\040\024\041\043\042\050" +
    "\043\051\050\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\305" +
    "\025\102\027\120\030\117\031\116\032\115\033\114\034" +
    "\203\035\106\036\105\037\104\043\051\044\107\047\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\312\015\311\050\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\025\102\027\120\030" +
    "\117\031\116\032\115\033\114\034\314\035\106\036\105" +
    "\037\104\043\051\044\107\047\064\001\001\000\002\001" +
    "\001\000\010\015\320\023\321\024\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\324\001\001\000\042" +
    "\012\014\013\027\014\054\015\021\016\055\017\011\020" +
    "\015\021\044\024\025\025\042\026\026\040\024\041\043" +
    "\042\050\043\051\050\016\001\001\000\002\001\001\000" +
    "\034\025\102\027\120\030\117\031\116\032\115\033\114" +
    "\034\327\035\106\036\105\037\104\043\051\044\107\047" +
    "\064\001\001\000\002\001\001\000\010\015\320\023\331" +
    "\024\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\334\001\001\000\042\012\014\013\027\014\054" +
    "\015\021\016\055\017\011\020\015\021\044\024\025\025" +
    "\042\026\026\040\024\041\043\042\050\043\051\050\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\340\025\102\027\120\030\117\031\116\032\115\033\114" +
    "\034\203\035\106\036\105\037\104\043\051\044\107\047" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\346\001\001\000\002\001\001\000\004\010\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\025\102" +
    "\027\120\030\117\031\116\032\115\033\114\034\356\035" +
    "\106\036\105\037\104\043\051\044\107\047\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\025\102\027" +
    "\120\030\117\031\116\032\115\033\114\034\361\035\106" +
    "\036\105\037\104\043\051\044\107\047\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\365\025\102\027\120\030\117\031\116\032\115\033" +
    "\114\034\203\035\106\036\105\037\104\043\051\044\107" +
    "\047\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\370\025\102\027\120\030\117\031\116\032\115" +
    "\033\114\034\203\035\106\036\105\037\104\043\051\044" +
    "\107\047\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\376\007\377\001\001\000" +
    "\002\001\001\000\004\045\u010d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u010c\001\001\000\004\045" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u010a\001\001\000\042" +
    "\012\014\013\027\014\054\015\021\016\055\017\011\020" +
    "\015\021\044\024\025\025\042\026\026\040\024\041\043" +
    "\042\050\043\051\050\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u010f\001\001" +
    "\000\042\012\014\013\027\014\054\015\021\016\055\017" +
    "\011\020\015\021\044\024\025\025\042\026\026\040\024" +
    "\041\043\042\050\043\051\050\016\001\001\000\002\001" +
    "\001\000\004\010\u0112\001\001\000\002\001\001\000\036" +
    "\004\u0114\025\102\027\120\030\117\031\116\032\115\033" +
    "\114\034\203\035\106\036\105\037\104\043\051\044\107" +
    "\047\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<TSError> errorList;
    public TSParser(TSLexer lexer, List<TSError> errorList){
        super(lexer);
        this.errorList = errorList;

    }

    public Symbol scan() throws Exception {
        Symbol symbol = this.getScanner().next_token();
        if (symbol == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        while(symbol != null && symbol.sym == TSParserSym.SYM) {
            this.report_expected_token_ids();
            Token token = (Token) symbol.value;
            errorList.add(
                new TSError(token.line(), token.column(), "El simbolo: "+token.value()+" no forma parte del lenguaje.")
            );
            symbol = this.getScanner().next_token();
        }

        if (symbol == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        return symbol;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;


        if (cur_token.sym == TSParserSym.EOF) {
            errorList.add(new TSError(token.line(), token.column(), "Simbolo no esperado."));

        } else {
            String tokenVal = token.value() == null? TSParserSym.terminalNames[token.type()]: token.value();
            errorList.add(new TSError(token.line(), token.column(), "Simbolo no esperado: "+tokenVal));

        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;

        if (cur_token.sym == TSParserSym.EOF) {
            errorList.add(new TSError(token.line(), token.column(), "Simbolo no esperado."));

        } else {
            String tokenVal = token.value() == null? TSParserSym.terminalNames[token.type()]: token.value();
            errorList.add(new TSError(token.line(), token.column(), "Simbolo no esperado: "+tokenVal));


        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TSParser$actions {
  private final TSParser parser;

  /** Constructor */
  CUP$TSParser$actions(TSParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TSParser$do_action_part00000000(
    int                        CUP$TSParser$act_num,
    java_cup.runtime.lr_parser CUP$TSParser$parser,
    java.util.Stack            CUP$TSParser$stack,
    int                        CUP$TSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TSParser$result;

      /* select the action based on the action number */
      switch (CUP$TSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = start_val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TSParser$parser.done_parsing();
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= instructions 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = list;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		
    RESULT = list;
    if(instruction != null){

        RESULT.add(instruction);
    }
    
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= 
            {
              List<Instruction> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parameters ::= parameters COMMA parameter 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = list; RESULT.add(p);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parameters ::= parameter 
            {
              List<Instruction> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(p);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parameter ::= ID COLON type 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int variableTypeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int variableTyperight = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		VariableType variableType = (VariableType)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Parameter(id.line(), id.column(), id.value(), variableType);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= NUMBER 
            {
              VariableType RESULT =null;
		RESULT = VariableType.NUMBER;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BIGINT 
            {
              VariableType RESULT =null;
		RESULT = VariableType.BIG_INT;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= STRING 
            {
              VariableType RESULT =null;
		RESULT = VariableType.STRING;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOLEAN 
            {
              VariableType RESULT =null;
		RESULT = VariableType.BOOLEAN;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= declarationInstruction SEMICOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= funInstruction 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= assignmentInstruction SEMICOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= ifInstruction 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= forInstruction 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= whileInstruction 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= doWhileInstruction 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= inDecInstruction SEMICOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= callFunction SEMICOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= consoleInstruction SEMICOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= continueInstruction SEMICOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= breakInstruction SEMICOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= returnInstruction SEMICOLON 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= error SEMICOLON 
            {
              Instruction RESULT =null;
		RESULT = null;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funInstruction ::= FUNCTION ID LPAREN parameters RPAREN returnType LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).right;
		List<Instruction> paramList = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		ReturnType type = (ReturnType)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int insListleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int insListright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> insList = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new Function(id.line(), id.column(),id.value(), paramList, insList, type);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("funInstruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funInstruction ::= FUNCTION ID LPAREN RPAREN returnType LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		ReturnType type = (ReturnType)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int insListleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int insListright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> insList = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new Function(id.line(), id.column(),id.value(), null, insList, type);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("funInstruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // returnType ::= COLON VOID 
            {
              ReturnType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = ReturnType.VOID;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // returnType ::= COLON NUMBER 
            {
              ReturnType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = ReturnType.NUMBER;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // returnType ::= COLON BIGINT 
            {
              ReturnType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = ReturnType.BIG_INT;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // returnType ::= COLON STRING 
            {
              ReturnType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = ReturnType.STRING;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // returnType ::= COLON BOOLEAN 
            {
              ReturnType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = ReturnType.BOOLEAN;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // returnType ::= 
            {
              ReturnType RESULT =null;
		RESULT = null;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifInstruction ::= IF LPAREN w RPAREN LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int ifIleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).left;
		int ifIright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).right;
		Token ifI = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).value;
		int trueBlockleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int trueBlockright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> trueBlock = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new If(ifI.line(), ifI.column(), val, trueBlock, null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ifInstruction",12, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ifInstruction ::= IF LPAREN w RPAREN LBRACE instructions RBRACE elseIfInstruction 
            {
              Instruction RESULT =null;
		int ifIleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)).left;
		int ifIright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)).right;
		Token ifI = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).value;
		int trueBlockleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int trueBlockright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		List<Instruction> trueBlock = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int falseBlockleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int falseBlockright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction falseBlock = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new If(ifI.line(), ifI.column(), val, trueBlock, falseBlock);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ifInstruction",12, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elseIfInstruction ::= ELSE ifInstruction 
            {
              Instruction RESULT =null;
		int ifIleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int ifIright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction ifI = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = ifI;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("elseIfInstruction",16, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elseIfInstruction ::= ELSE LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int elIleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int elIright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token elI = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int insListleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int insListright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> insList = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new Else(elI.line(), elI.column(), insList);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("elseIfInstruction",16, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // forInstruction ::= FOR LPAREN declarationInstruction SEMICOLON w SEMICOLON assignmentInDec RPAREN LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)).right;
		Token fr = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).right;
		Instruction o = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new For(fr.line(), fr.column(), d, o, i, list);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("forInstruction",13, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // forInstruction ::= FOR LPAREN assignmentInstruction SEMICOLON w SEMICOLON assignmentInDec RPAREN LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)).right;
		Token fr = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).right;
		Instruction o = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new For(fr.line(), fr.column(), d, o, i, list);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("forInstruction",13, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignmentInDec ::= inDecInstruction 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInDec",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignmentInDec ::= assignmentInstruction 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = i;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInDec",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inDecInstruction ::= 
            {
              Instruction RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inDecInstruction ::= ID INCREMENT 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(
	    i.line(), i.column(), new Value(id.line(), id.column(), id.value(), ValueType.ID), OperationType.INCREMENT
	);
	
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // inDecInstruction ::= ID DECREMENT 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(
	    d.line(), d.column(), new Value(id.line(), id.column(), id.value(), ValueType.ID), OperationType.DECREMENT
	);
	
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // whileInstruction ::= WHILE LPAREN w RPAREN LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).right;
		Token wl = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new While(wl.line(),wl.column(), val, list);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("whileInstruction",14, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // doWhileInstruction ::= DO LBRACE instructions RBRACE WHILE LPAREN w RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int doIleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).left;
		int doIright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).right;
		Token doI = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		RESULT = new DoWhile(doI.line(), doI.column(), val, list);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("doWhileInstruction",15, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declarationInstruction ::= decType declarationList 
            {
              Instruction RESULT =null;
		int decTypeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int decTyperight = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token decType = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		
        DeclarationType type = DeclarationType.CONST;
        if(decType.type() == TSParserSym.LET){
            type = DeclarationType.LET;
        }
        RESULT = new Declaration(decType.line(), decType.column(), type, list);
    
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationInstruction",10, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declarationList ::= declarationList COMMA ID idType ASSIGN w 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int variableTypeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int variableTyperight = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		VariableType variableType = (VariableType)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = list; RESULT.add(new VariableDeclaration(id.line(),id.column(),id.value(),variableType, val));
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",3, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declarationList ::= declarationList COMMA ID idType 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int variableTypeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int variableTyperight = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		VariableType variableType = (VariableType)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = list; RESULT.add(new VariableDeclaration(id.line(),id.column(),id.value(),variableType, null));
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",3, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declarationList ::= ID idType 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int variableTypeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int variableTyperight = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		VariableType variableType = (VariableType)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(new VariableDeclaration(id.line(),id.column(),id.value(),variableType, null));
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",3, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declarationList ::= ID idType ASSIGN w 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int variableTypeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int variableTyperight = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		VariableType variableType = (VariableType)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(new VariableDeclaration(id.line(),id.column(),id.value(),variableType, val));
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",3, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // idType ::= COLON type 
            {
              VariableType RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		VariableType type = (VariableType)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = type;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("idType",7, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // idType ::= 
            {
              VariableType RESULT =null;
		RESULT = null;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("idType",7, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decType ::= LET 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = t;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("decType",38, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decType ::= CONST 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = t;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("decType",38, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignmentInstruction ::= ID ASSIGN w 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Assignment(id.line(), id.column(), id.value(), val);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInstruction",11, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // callFunction ::= ID LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new CallFunction(id.line(), id.column(), id.value(), ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // callFunction ::= ID LPAREN RPAREN 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		RESULT = new CallFunction(id.line(), id.column(), id.value(), null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // callFunction ::= PRINT_AST LPAREN w RPAREN 
            {
              Instruction RESULT =null;
		int printleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int printright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token print = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new CallFunction(print.line(), print.column(), "printAst",Collections.singletonList(val));
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // callFunction ::= SYMBOL_TABLE LPAREN RPAREN 
            {
              Instruction RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Token table = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		RESULT = new CallFunction(table.line(), table.column(), "getSymbolTable", null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // callFunction ::= mathFun 
            {
              Instruction RESULT =null;
		int mathleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int mathright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction math = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = math;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ids ::= ids COMMA w 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = list; RESULT.add(val);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ids",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ids ::= w 
            {
              List<Instruction> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(val);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ids",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ids ::= error COMMA 
            {
              List<Instruction> RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ids",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // consoleInstruction ::= CONSOLE_LOG LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int consoleleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int consoleright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token console = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new ConsoleLog(console.line(), console.column(), ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("consoleInstruction",20, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // consoleInstruction ::= error RPAREN 
            {
              Instruction RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("consoleInstruction",20, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // continueInstruction ::= CONTINUE 
            {
              Instruction RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Continue(cont.line(), cont.column());
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("continueInstruction",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // breakInstruction ::= BREAK 
            {
              Instruction RESULT =null;
		int brkleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int brkright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token brk = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Break(brk.line(), brk.column());
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("breakInstruction",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // returnInstruction ::= RETURN 
            {
              Instruction RESULT =null;
		int rtnleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rtnright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token rtn = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new ReturnInstruction(rtn.line(), rtn.column(), null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnInstruction",32, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // returnInstruction ::= RETURN w 
            {
              Instruction RESULT =null;
		int rtnleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int rtnright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token rtn = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new ReturnInstruction(rtn.line(), rtn.column(), val);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnInstruction",32, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // w ::= w OR x 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.OR);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("w",26, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // w ::= x 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("w",26, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // x ::= x AND y 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.AND);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("x",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // x ::= y 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("x",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // y ::= NOT z 
            {
              Instruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new UnaryOperation(op.line(), op.column(), rgt, OperationType.NOT);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // y ::= z 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // z ::= z EQUALS a 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.EQUALS);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // z ::= z NOT_EQUALS a 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.NOT_EQUALS);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // z ::= z LESS a 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.LESS);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // z ::= z GREATER a 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.GREATER);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // z ::= z LESS_EQ a 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.LESS_EQ);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // z ::= z GREATER_EQ a 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.GREATER_EQ);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // z ::= a 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // a ::= a PLUS b 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(ps.line(),ps.column(), lft, rgt, OperationType.PLUS);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // a ::= a MINUS b 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token ms = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(ms.line(),ms.column(), lft, rgt, OperationType.MINUS);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // a ::= b 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // b ::= b TIMES c 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token tm = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(tm.line(),tm.column(), lft, rgt, OperationType.TIMES);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",22, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // b ::= b DIVIDE c 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token dv = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(dv.line(),dv.column(), lft, rgt, OperationType.DIVIDE);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",22, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // b ::= b MOD c 
            {
              Instruction RESULT =null;
		int lftleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lftright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction lft = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token md = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int rgtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rgtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction rgt = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new BinaryOperation(md.line(),md.column(), lft, rgt, OperationType.MOD);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",22, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // b ::= c 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",22, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // c ::= d 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // c ::= d DOT stringFun 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		StringInstruction string = (StringInstruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		string.setValue(val);RESULT = string;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // d ::= castFun LPAREN w RPAREN 
            {
              Instruction RESULT =null;
		int castleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int castright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token cast = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		
    switch(cast.type()){
        case TSParserSym.NUMBER_FUN -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_NUM);
        }
        case TSParserSym.BIGINT_FUN -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_BIG);
        }
        case TSParserSym.BOOLEAN_FUN -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_BOOL);

        }
        case TSParserSym.STRING_FUN -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_STRING);

        }

    }
    
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // d ::= MINUS e 
            {
              Instruction RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new UnaryOperation(m.line(), m.column(), d, OperationType.MINUS);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // d ::= PLUS e 
            {
              Instruction RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = d;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // d ::= e 
            {
              Instruction RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = d;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // e ::= NUMBER_VALUE 
            {
              Instruction RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token number = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Value(number.line(), number.column(), number.value(), ValueType.NUMBER_VALUE);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // e ::= BIGINT_VALUE 
            {
              Instruction RESULT =null;
		int bigIntleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int bigIntright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token bigInt = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Value(bigInt.line(), bigInt.column(), bigInt.value(), ValueType.BIG_INT_VALUE);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // e ::= TRUE 
            {
              Instruction RESULT =null;
		int trueValleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int trueValright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token trueVal = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Value(trueVal.line(), trueVal.column(), "true", ValueType.BOOLEAN);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // e ::= FALSE 
            {
              Instruction RESULT =null;
		int falseValleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int falseValright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token falseVal = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Value(falseVal.line(), falseVal.column(), "false", ValueType.BOOLEAN);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // e ::= STRING_VALUE 
            {
              Instruction RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token string = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Value(string.line(), string.column(), string.value(), ValueType.STRING_VALUE);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // e ::= ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new Value(id.line(), id.column(), id.value(), ValueType.ID);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // e ::= callFunction 
            {
              Instruction RESULT =null;
		int callFunctionleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int callFunctionright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction callFunction = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = callFunction;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // e ::= mathConst 
            {
              Instruction RESULT =null;
		int mathleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int mathright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Instruction math = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = math;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // e ::= LPAREN w RPAREN 
            {
              Instruction RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // castFun ::= NUMBER_FUN 
            {
              Token RESULT =null;
		int nbrleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int nbrright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token nbr = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = nbr;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // castFun ::= BIGINT_FUN 
            {
              Token RESULT =null;
		int bgleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int bgright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token bg = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = bg;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // castFun ::= STRING_FUN 
            {
              Token RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token st = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = st;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // castFun ::= BOOLEAN_FUN 
            {
              Token RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token bl = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = bl;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stringFun ::= LENGTH 
            {
              StringInstruction RESULT =null;
		int lngtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int lngtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token lngt = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new StringInstruction(lngt.line(),lngt.column(), null, StringType.LENGTH, null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stringFun ::= CHAR_AT LPAREN a RPAREN 
            {
              StringInstruction RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token ct = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new StringInstruction(ct.line(),ct.column(), null, StringType.CHAR_AT, val);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stringFun ::= LOWER LPAREN RPAREN 
            {
              StringInstruction RESULT =null;
		int lwleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lwright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Token lw = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		RESULT = new StringInstruction(lw.line(),lw.column(), null, StringType.LOWER, null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // stringFun ::= UPPER LPAREN RPAREN 
            {
              StringInstruction RESULT =null;
		int upleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int upright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Token up = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		RESULT = new StringInstruction(up.line(),up.column(), null, StringType.UPPER, null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // stringFun ::= CONCAT LPAREN a RPAREN 
            {
              StringInstruction RESULT =null;
		int cctleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int cctright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token cct = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Instruction val = (Instruction)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new StringInstruction(cct.line(),cct.column(), null, StringType.CONCAT, val);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stringFun ::= error RPAREN 
            {
              StringInstruction RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // mathFun ::= ABS LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token bs = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(bs.line(), bs.column(), MathType.ABS, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // mathFun ::= CEIL LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token cl = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(cl.line(), cl.column(), MathType.CEIL, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // mathFun ::= COS LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token cs = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(cs.line(), cs.column(), MathType.COS, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // mathFun ::= SIN LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token sn = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(sn.line(), sn.column(), MathType.SIN, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // mathFun ::= TAN LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token tn = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(tn.line(), tn.column(), MathType.TAN, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // mathFun ::= EXP LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int xpleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int xpright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token xp = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(xp.line(), xp.column(), MathType.EXP, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // mathFun ::= FLOOR LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token fr = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(fr.line(), fr.column(), MathType.FLOOR, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // mathFun ::= POW LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int pwleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int pwright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token pw = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(pw.line(), pw.column(), MathType.POW, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // mathFun ::= SQRT LPAREN ids RPAREN 
            {
              Instruction RESULT =null;
		int srtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).left;
		int srtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).right;
		Token srt = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		List<Instruction> ids = (List<Instruction>)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = new MathInstruction(srt.line(), srt.column(), MathType.SQRT, ids);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // mathFun ::= RANDOM LPAREN RPAREN 
            {
              Instruction RESULT =null;
		int rmleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int rmright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Token rm = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		RESULT = new MathInstruction(rm.line(), rm.column(), MathType.RANDOM, null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // mathConst ::= E 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new MathInstruction(e.line(), e.column(), MathType.E, null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathConst",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // mathConst ::= PI 
            {
              Instruction RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token pi = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new MathInstruction(pi.line(), pi.column(), MathType.PI, null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathConst",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // mathConst ::= SQRT_TWO 
            {
              Instruction RESULT =null;
		int sqrtleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int sqrtright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Token sqrt = (Token)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		RESULT = new MathInstruction(sqrt.line(), sqrt.column(), MathType.SQRT_TWO, null);
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathConst",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TSParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TSParser$do_action(
    int                        CUP$TSParser$act_num,
    java_cup.runtime.lr_parser CUP$TSParser$parser,
    java.util.Stack            CUP$TSParser$stack,
    int                        CUP$TSParser$top)
    throws java.lang.Exception
    {
              return CUP$TSParser$do_action_part00000000(
                               CUP$TSParser$act_num,
                               CUP$TSParser$parser,
                               CUP$TSParser$stack,
                               CUP$TSParser$top);
    }
}

}
