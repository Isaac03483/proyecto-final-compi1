
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.typeSecure.compiler.parser;

import com.mio.typeSecure.compiler.lexer.TSLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TSParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public TSParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TSParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\002\000\002\005\005\000\002\005\003" +
    "\000\002\006\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\003\013\000\002" +
    "\003\012\000\002\045\004\000\002\045\004\000\002\045" +
    "\004\000\002\045\004\000\002\045\004\000\002\045\002" +
    "\000\002\013\011\000\002\013\012\000\002\017\004\000" +
    "\002\017\006\000\002\014\015\000\002\014\015\000\002" +
    "\020\003\000\002\020\003\000\002\026\002\000\002\026" +
    "\004\000\002\026\004\000\002\015\011\000\002\016\013" +
    "\000\002\011\004\000\002\021\010\000\002\021\006\000" +
    "\002\021\004\000\002\021\006\000\002\025\004\000\002" +
    "\025\002\000\002\022\003\000\002\022\003\000\002\012" +
    "\005\000\002\027\006\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\003\000\002\031\006\000" +
    "\002\042\003\000\002\043\003\000\002\044\003\000\002" +
    "\044\004\000\002\036\005\000\002\036\003\000\002\037" +
    "\005\000\002\037\003\000\002\040\004\000\002\040\003" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\003\000\002\034\006\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\005\000\002\035\003\000\002\035" +
    "\003\000\002\035\005\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\006\000\002\024\005\000\002\024\005\000\002\024" +
    "\006\000\002\046\006\000\002\046\006\000\002\046\006" +
    "\000\002\046\006\000\002\046\006\000\002\046\006\000" +
    "\002\046\006\000\002\046\010\000\002\046\006\000\002" +
    "\046\005\000\002\047\003\000\002\047\003\000\002\047" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\062\002\ufffe\016\ufffe\045\ufffe\046\ufffe\060" +
    "\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe" +
    "\070\ufffe\071\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101" +
    "\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe" +
    "\001\002\000\004\002\u0108\001\002\000\062\002\000\016" +
    "\uffd9\045\014\046\045\060\037\061\031\063\023\064\044" +
    "\065\051\066\036\067\020\070\010\071\034\075\012\076" +
    "\050\077\035\100\043\101\021\102\032\103\022\104\007" +
    "\105\011\106\015\107\033\001\002\000\004\107\374\001" +
    "\002\000\004\013\367\001\002\000\004\107\332\001\002" +
    "\000\004\013\327\001\002\000\004\013\324\001\002\000" +
    "\064\002\ufff2\016\ufff2\034\ufff2\045\ufff2\046\ufff2\060\ufff2" +
    "\061\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2" +
    "\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\001" +
    "\002\000\004\107\uffcc\001\002\000\004\013\322\001\002" +
    "\000\064\002\ufff5\016\ufff5\034\ufff5\045\ufff5\046\ufff5\060" +
    "\ufff5\061\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\101" +
    "\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5" +
    "\001\002\000\064\002\ufff1\016\ufff1\034\ufff1\045\ufff1\046" +
    "\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1" +
    "\067\ufff1\070\ufff1\071\ufff1\075\ufff1\076\ufff1\077\ufff1\100" +
    "\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\106\ufff1" +
    "\107\ufff1\001\002\000\004\016\uffc4\001\002\000\004\013" +
    "\317\001\002\000\004\013\314\001\002\000\004\013\265" +
    "\001\002\000\004\016\264\001\002\000\004\016\263\001" +
    "\002\000\004\016\262\001\002\000\004\016\261\001\002" +
    "\000\064\002\uffff\016\uffff\034\uffff\045\uffff\046\uffff\060" +
    "\uffff\061\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff" +
    "\070\uffff\071\uffff\075\uffff\076\uffff\077\uffff\100\uffff\101" +
    "\uffff\102\uffff\103\uffff\104\uffff\105\uffff\106\uffff\107\uffff" +
    "\001\002\000\004\013\245\001\002\000\004\013\242\001" +
    "\002\000\012\004\237\005\236\013\171\026\240\001\002" +
    "\000\066\013\067\016\uffc2\021\071\035\074\036\107\047" +
    "\064\050\066\051\105\052\075\072\070\073\065\074\063" +
    "\075\012\076\050\077\035\100\043\101\021\102\032\103" +
    "\022\104\007\105\011\106\015\107\072\110\106\111\073" +
    "\112\077\001\002\000\004\013\232\001\002\000\004\016" +
    "\uffc3\001\002\000\004\013\227\001\002\000\004\016\226" +
    "\001\002\000\064\002\ufff0\016\ufff0\034\ufff0\045\ufff0\046" +
    "\ufff0\060\ufff0\061\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\075\ufff0\076\ufff0\077\ufff0\100" +
    "\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0" +
    "\107\ufff0\001\002\000\004\016\225\001\002\000\004\013" +
    "\222\001\002\000\004\013\214\001\002\000\004\107\uffcd" +
    "\001\002\000\004\016\213\001\002\000\042\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\001\002\000\004\013\210\001\002\000\004" +
    "\033\055\001\002\000\004\016\054\001\002\000\064\002" +
    "\ufff3\016\ufff3\034\ufff3\045\ufff3\046\ufff3\060\ufff3\061\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3" +
    "\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\001\002\000" +
    "\064\002\ufff6\016\ufff6\034\ufff6\045\ufff6\046\ufff6\060\ufff6" +
    "\061\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6" +
    "\102\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107\ufff6\001" +
    "\002\000\062\016\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe" +
    "\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070" +
    "\ufffe\071\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe" +
    "\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe\001" +
    "\002\000\062\016\uffd9\034\057\045\014\046\045\060\037" +
    "\061\031\063\023\064\044\065\051\066\036\067\020\070" +
    "\010\071\034\075\012\076\050\077\035\100\043\101\021" +
    "\102\032\103\022\104\007\105\011\106\015\107\033\001" +
    "\002\000\004\064\060\001\002\000\004\013\061\001\002" +
    "\000\064\013\067\021\071\035\074\036\107\047\064\050" +
    "\066\051\105\052\075\072\070\073\065\074\063\075\012" +
    "\076\050\077\035\100\043\101\021\102\032\103\022\104" +
    "\007\105\011\106\015\107\072\110\106\111\073\112\077" +
    "\001\002\000\004\013\205\001\002\000\042\006\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\014\uff8a\016\uff8a\017\uff8a" +
    "\020\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\001\002\000\004\013\uff9f\001\002\000\042" +
    "\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\014\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\001\002\000\004\013\uff9e\001" +
    "\002\000\062\013\067\035\074\036\107\047\064\050\066" +
    "\051\105\052\075\072\070\073\065\074\063\075\012\076" +
    "\050\077\035\100\043\101\021\102\032\103\022\104\007" +
    "\105\011\106\015\107\072\110\106\111\073\112\077\001" +
    "\002\000\042\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\014\uff8c\016\uff8c\017\uff8c\020\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c\001\002\000\062" +
    "\013\067\035\074\036\107\047\064\050\066\051\105\052" +
    "\075\072\070\073\065\074\063\075\012\076\050\077\035" +
    "\100\043\101\021\102\032\103\022\104\007\105\011\106" +
    "\015\107\072\110\106\111\073\112\077\001\002\000\046" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\171\014" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\027\uffa4\030\uffa4\031\uffa4\032\172\001\002\000" +
    "\042\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\014\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\001\002\000\042\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\001\002\000\004\013\uff9c\001\002\000" +
    "\042\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\014\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\001\002\000\044\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\014\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\032\150\001\002\000\030\014\uffbb\016" +
    "\uffbb\017\135\020\140\022\141\023\136\024\137\025\134" +
    "\027\uffbb\030\uffbb\031\uffbb\001\002\000\014\014\uffbd\016" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\001\002\000\014\014\uffbf" +
    "\016\uffbf\027\131\030\uffbf\031\uffbf\001\002\000\042\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\014\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\001\002\000\006\014\126\030\127" +
    "\001\002\000\004\013\uff9d\001\002\000\042\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\001\002\000\042\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\001\002\000\042\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\014\uffab\016\uffab\017\uffab\020\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\027\uffab\030\uffab\031\uffab\001\002\000" +
    "\042\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\014\uffad" +
    "\016\uffad\017\uffad\020\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\001\002\000\042\006\uffb1" +
    "\007\uffb1\010\121\011\120\012\117\014\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\001\002\000\034\006\114\007\115\014" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\027\uffb4\030\uffb4\031\uffb4\001\002\000\062\013" +
    "\067\035\074\036\107\047\064\050\066\051\105\052\075" +
    "\072\070\073\065\074\063\075\012\076\050\077\035\100" +
    "\043\101\021\102\032\103\022\104\007\105\011\106\015" +
    "\107\072\110\106\111\073\112\077\001\002\000\062\013" +
    "\067\035\074\036\107\047\064\050\066\051\105\052\075" +
    "\072\070\073\065\074\063\075\012\076\050\077\035\100" +
    "\043\101\021\102\032\103\022\104\007\105\011\106\015" +
    "\107\072\110\106\111\073\112\077\001\002\000\042\006" +
    "\uffb2\007\uffb2\010\121\011\120\012\117\014\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\001\002\000\062\013\067\035\074" +
    "\036\107\047\064\050\066\051\105\052\075\072\070\073" +
    "\065\074\063\075\012\076\050\077\035\100\043\101\021" +
    "\102\032\103\022\104\007\105\011\106\015\107\072\110" +
    "\106\111\073\112\077\001\002\000\062\013\067\035\074" +
    "\036\107\047\064\050\066\051\105\052\075\072\070\073" +
    "\065\074\063\075\012\076\050\077\035\100\043\101\021" +
    "\102\032\103\022\104\007\105\011\106\015\107\072\110" +
    "\106\111\073\112\077\001\002\000\062\013\067\035\074" +
    "\036\107\047\064\050\066\051\105\052\075\072\070\073" +
    "\065\074\063\075\012\076\050\077\035\100\043\101\021" +
    "\102\032\103\022\104\007\105\011\106\015\107\072\110" +
    "\106\111\073\112\077\001\002\000\042\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\014\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\001\002\000\042\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\001" +
    "\002\000\042\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\014\uffae\016\uffae\017\uffae\020\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\027\uffae\030\uffae\031\uffae\001\002\000\042" +
    "\006\uffb3\007\uffb3\010\121\011\120\012\117\014\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\001\002\000\004\016\133\001" +
    "\002\000\064\013\067\021\071\035\074\036\107\047\064" +
    "\050\066\051\105\052\075\072\070\073\065\074\063\075" +
    "\012\076\050\077\035\100\043\101\021\102\032\103\022" +
    "\104\007\105\011\106\015\107\072\110\106\111\073\112" +
    "\077\001\002\000\014\014\uffc0\016\uffc0\027\131\030\uffc0" +
    "\031\uffc0\001\002\000\064\013\067\021\071\035\074\036" +
    "\107\047\064\050\066\051\105\052\075\072\070\073\065" +
    "\074\063\075\012\076\050\077\035\100\043\101\021\102" +
    "\032\103\022\104\007\105\011\106\015\107\072\110\106" +
    "\111\073\112\077\001\002\000\014\014\uffbe\016\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\001\002\000\064\002\uffd5\016\uffd5" +
    "\034\uffd5\045\uffd5\046\uffd5\060\uffd5\061\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\075\uffd5" +
    "\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\106\uffd5\107\uffd5\001\002\000\062\013\067" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\062\013\067" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\062\013\067" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\062\013\067" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\062\013\067" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\062\013\067" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\034\006\114" +
    "\007\115\014\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\001\002" +
    "\000\034\006\114\007\115\014\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\001\002\000\034\006\114\007\115\014\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\001\002\000\034\006\114\007" +
    "\115\014\uffb6\016\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\001\002\000" +
    "\034\006\114\007\115\014\uffba\016\uffba\017\uffba\020\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\027\uffba\030\uffba\031" +
    "\uffba\001\002\000\034\006\114\007\115\014\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\001\002\000\014\053\154\054\153" +
    "\055\151\056\155\057\156\001\002\000\004\013\167\001" +
    "\002\000\042\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\014\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\001\002\000\004" +
    "\013\164\001\002\000\042\006\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\014\uff9b\016\uff9b\017\uff9b\020\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\001" +
    "\002\000\004\013\162\001\002\000\004\013\157\001\002" +
    "\000\062\013\067\035\074\036\107\047\064\050\066\051" +
    "\105\052\075\072\070\073\065\074\063\075\012\076\050" +
    "\077\035\100\043\101\021\102\032\103\022\104\007\105" +
    "\011\106\015\107\072\110\106\111\073\112\077\001\002" +
    "\000\010\006\114\007\115\014\161\001\002\000\042\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\014\uff97\016\uff97" +
    "\017\uff97\020\uff97\022\uff97\023\uff97\024\uff97\025\uff97\027" +
    "\uff97\030\uff97\031\uff97\001\002\000\004\014\163\001\002" +
    "\000\042\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\014" +
    "\uff98\016\uff98\017\uff98\020\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\027\uff98\030\uff98\031\uff98\001\002\000\062\013" +
    "\067\035\074\036\107\047\064\050\066\051\105\052\075" +
    "\072\070\073\065\074\063\075\012\076\050\077\035\100" +
    "\043\101\021\102\032\103\022\104\007\105\011\106\015" +
    "\107\072\110\106\111\073\112\077\001\002\000\010\006" +
    "\114\007\115\014\166\001\002\000\042\006\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\014\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\001\002\000\004\014\170\001\002\000\042\006" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\014\uff99\016\uff99" +
    "\017\uff99\020\uff99\022\uff99\023\uff99\024\uff99\025\uff99\027" +
    "\uff99\030\uff99\031\uff99\001\002\000\066\013\067\014\174" +
    "\021\071\035\074\036\107\047\064\050\066\051\105\052" +
    "\075\072\070\073\065\074\063\075\012\076\050\077\035" +
    "\100\043\101\021\102\032\103\022\104\007\105\011\106" +
    "\015\107\072\110\106\111\073\112\077\001\002\000\014" +
    "\053\154\054\153\055\151\056\155\057\156\001\002\000" +
    "\042\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\001\002\000\042\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\001\002\000\010\014\uffc6\030\127\031" +
    "\uffc6\001\002\000\006\014\200\031\177\001\002\000\064" +
    "\013\067\021\071\035\074\036\107\047\064\050\066\051" +
    "\105\052\075\072\070\073\065\074\063\075\012\076\050" +
    "\077\035\100\043\101\021\102\032\103\022\104\007\105" +
    "\011\106\015\107\072\110\106\111\073\112\077\001\002" +
    "\000\042\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014" +
    "\uffca\016\uffca\017\uffca\020\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\027\uffca\030\uffca\031\uffca\001\002\000\010\014" +
    "\uffc7\030\127\031\uffc7\001\002\000\030\014\uffbc\016\uffbc" +
    "\017\135\020\140\022\141\023\136\024\137\025\134\027" +
    "\uffbc\030\uffbc\031\uffbc\001\002\000\010\006\114\007\115" +
    "\014\204\001\002\000\042\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\014\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\001" +
    "\002\000\062\013\067\035\074\036\107\047\064\050\066" +
    "\051\105\052\075\072\070\073\065\074\063\075\012\076" +
    "\050\077\035\100\043\101\021\102\032\103\022\104\007" +
    "\105\011\106\015\107\072\110\106\111\073\112\077\001" +
    "\002\000\010\006\114\007\115\014\207\001\002\000\042" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\014\uffac\016" +
    "\uffac\017\uffac\020\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\027\uffac\030\uffac\031\uffac\001\002\000\062\013\067\035" +
    "\074\036\107\047\064\050\066\051\105\052\075\072\070" +
    "\073\065\074\063\075\012\076\050\077\035\100\043\101" +
    "\021\102\032\103\022\104\007\105\011\106\015\107\072" +
    "\110\106\111\073\112\077\001\002\000\010\006\114\007" +
    "\115\014\212\001\002\000\042\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\014\uff95\016\uff95\017\uff95\020\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\027\uff95\030\uff95\031\uff95" +
    "\001\002\000\064\002\uffea\016\uffea\034\uffea\045\uffea\046" +
    "\uffea\060\uffea\061\uffea\063\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\075\uffea\076\uffea\077\uffea\100" +
    "\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea" +
    "\107\uffea\001\002\000\064\013\067\021\071\035\074\036" +
    "\107\047\064\050\066\051\105\052\075\072\070\073\065" +
    "\074\063\075\012\076\050\077\035\100\043\101\021\102" +
    "\032\103\022\104\007\105\011\106\015\107\072\110\106" +
    "\111\073\112\077\001\002\000\006\014\216\030\127\001" +
    "\002\000\004\033\217\001\002\000\062\016\ufffe\034\ufffe" +
    "\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105" +
    "\ufffe\106\ufffe\107\ufffe\001\002\000\062\016\uffd9\034\221" +
    "\045\014\046\045\060\037\061\031\063\023\064\044\065" +
    "\051\066\036\067\020\070\010\071\034\075\012\076\050" +
    "\077\035\100\043\101\021\102\032\103\022\104\007\105" +
    "\011\106\015\107\033\001\002\000\064\002\uffd6\016\uffd6" +
    "\034\uffd6\045\uffd6\046\uffd6\060\uffd6\061\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104" +
    "\uffd6\105\uffd6\106\uffd6\107\uffd6\001\002\000\062\013\067" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\010\006\114" +
    "\007\115\014\224\001\002\000\042\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\014\uff93\016\uff93\017\uff93\020\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\027\uff93\030\uff93\031" +
    "\uff93\001\002\000\064\002\uffeb\016\uffeb\034\uffeb\045\uffeb" +
    "\046\uffeb\060\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\075\uffeb\076\uffeb\077\uffeb" +
    "\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb\106" +
    "\uffeb\107\uffeb\001\002\000\064\002\uffee\016\uffee\034\uffee" +
    "\045\uffee\046\uffee\060\uffee\061\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\070\uffee\071\uffee\075\uffee\076\uffee" +
    "\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105" +
    "\uffee\106\uffee\107\uffee\001\002\000\064\013\067\021\071" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\006\014\231" +
    "\031\177\001\002\000\004\016\uffc5\001\002\000\062\013" +
    "\067\035\074\036\107\047\064\050\066\051\105\052\075" +
    "\072\070\073\065\074\063\075\012\076\050\077\035\100" +
    "\043\101\021\102\032\103\022\104\007\105\011\106\015" +
    "\107\072\110\106\111\073\112\077\001\002\000\010\006" +
    "\114\007\115\014\234\001\002\000\042\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\014\uff94\016\uff94\017\uff94\020" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\027\uff94\030\uff94" +
    "\031\uff94\001\002\000\006\016\uffc1\030\127\001\002\000" +
    "\006\014\uffd7\016\uffd7\001\002\000\006\014\uffd8\016\uffd8" +
    "\001\002\000\064\013\067\021\071\035\074\036\107\047" +
    "\064\050\066\051\105\052\075\072\070\073\065\074\063" +
    "\075\012\076\050\077\035\100\043\101\021\102\032\103" +
    "\022\104\007\105\011\106\015\107\072\110\106\111\073" +
    "\112\077\001\002\000\010\014\uffcb\016\uffcb\030\127\001" +
    "\002\000\062\013\067\035\074\036\107\047\064\050\066" +
    "\051\105\052\075\072\070\073\065\074\063\075\012\076" +
    "\050\077\035\100\043\101\021\102\032\103\022\104\007" +
    "\105\011\106\015\107\072\110\106\111\073\112\077\001" +
    "\002\000\010\006\114\007\115\014\244\001\002\000\042" +
    "\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\014\uff91\016" +
    "\uff91\017\uff91\020\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\027\uff91\030\uff91\031\uff91\001\002\000\064\013\067\021" +
    "\071\035\074\036\107\047\064\050\066\051\105\052\075" +
    "\072\070\073\065\074\063\075\012\076\050\077\035\100" +
    "\043\101\021\102\032\103\022\104\007\105\011\106\015" +
    "\107\072\110\106\111\073\112\077\001\002\000\006\014" +
    "\247\030\127\001\002\000\004\033\250\001\002\000\062" +
    "\016\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103" +
    "\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe\001\002\000\062" +
    "\016\uffd9\034\252\045\014\046\045\060\037\061\031\063" +
    "\023\064\044\065\051\066\036\067\020\070\010\071\034" +
    "\075\012\076\050\077\035\100\043\101\021\102\032\103" +
    "\022\104\007\105\011\106\015\107\033\001\002\000\066" +
    "\002\uffe1\016\uffe1\034\uffe1\045\uffe1\046\uffe1\060\uffe1\061" +
    "\uffe1\062\253\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101" +
    "\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1" +
    "\001\002\000\006\033\255\061\031\001\002\000\064\002" +
    "\uffe0\016\uffe0\034\uffe0\045\uffe0\046\uffe0\060\uffe0\061\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0" +
    "\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\001\002\000" +
    "\062\016\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe" +
    "\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071" +
    "\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe" +
    "\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe\001\002\000" +
    "\064\002\uffdf\016\uffdf\034\uffdf\045\uffdf\046\uffdf\060\uffdf" +
    "\061\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070" +
    "\uffdf\071\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf\001" +
    "\002\000\062\016\uffd9\034\260\045\014\046\045\060\037" +
    "\061\031\063\023\064\044\065\051\066\036\067\020\070" +
    "\010\071\034\075\012\076\050\077\035\100\043\101\021" +
    "\102\032\103\022\104\007\105\011\106\015\107\033\001" +
    "\002\000\064\002\uffde\016\uffde\034\uffde\045\uffde\046\uffde" +
    "\060\uffde\061\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\075\uffde\076\uffde\077\uffde\100\uffde" +
    "\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106\uffde\107" +
    "\uffde\001\002\000\064\002\uffed\016\uffed\034\uffed\045\uffed" +
    "\046\uffed\060\uffed\061\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\075\uffed\076\uffed\077\uffed" +
    "\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106" +
    "\uffed\107\uffed\001\002\000\064\002\uffef\016\uffef\034\uffef" +
    "\045\uffef\046\uffef\060\uffef\061\uffef\063\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\070\uffef\071\uffef\075\uffef\076\uffef" +
    "\077\uffef\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef\105" +
    "\uffef\106\uffef\107\uffef\001\002\000\064\002\uffec\016\uffec" +
    "\034\uffec\045\uffec\046\uffec\060\uffec\061\uffec\063\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\075\uffec" +
    "\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec\104" +
    "\uffec\105\uffec\106\uffec\107\uffec\001\002\000\064\002\ufff4" +
    "\016\ufff4\034\ufff4\045\ufff4\046\ufff4\060\ufff4\061\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103" +
    "\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\001\002\000\010" +
    "\045\014\046\045\107\266\001\002\000\004\026\240\001" +
    "\002\000\004\016\304\001\002\000\004\016\271\001\002" +
    "\000\064\013\067\021\071\035\074\036\107\047\064\050" +
    "\066\051\105\052\075\072\070\073\065\074\063\075\012" +
    "\076\050\077\035\100\043\101\021\102\032\103\022\104" +
    "\007\105\011\106\015\107\072\110\106\111\073\112\077" +
    "\001\002\000\006\016\273\030\127\001\002\000\006\014" +
    "\uffd9\107\274\001\002\000\010\004\237\005\236\026\240" +
    "\001\002\000\004\014\uffda\001\002\000\004\014\uffdb\001" +
    "\002\000\004\014\300\001\002\000\004\033\301\001\002" +
    "\000\062\016\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe" +
    "\071\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102" +
    "\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe\001\002" +
    "\000\062\016\uffd9\034\303\045\014\046\045\060\037\061" +
    "\031\063\023\064\044\065\051\066\036\067\020\070\010" +
    "\071\034\075\012\076\050\077\035\100\043\101\021\102" +
    "\032\103\022\104\007\105\011\106\015\107\033\001\002" +
    "\000\064\002\uffdd\016\uffdd\034\uffdd\045\uffdd\046\uffdd\060" +
    "\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\071\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101" +
    "\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd" +
    "\001\002\000\064\013\067\021\071\035\074\036\107\047" +
    "\064\050\066\051\105\052\075\072\070\073\065\074\063" +
    "\075\012\076\050\077\035\100\043\101\021\102\032\103" +
    "\022\104\007\105\011\106\015\107\072\110\106\111\073" +
    "\112\077\001\002\000\006\016\306\030\127\001\002\000" +
    "\006\014\uffd9\107\274\001\002\000\004\014\310\001\002" +
    "\000\004\033\311\001\002\000\062\016\ufffe\034\ufffe\045" +
    "\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076\ufffe\077" +
    "\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe" +
    "\106\ufffe\107\ufffe\001\002\000\062\016\uffd9\034\313\045" +
    "\014\046\045\060\037\061\031\063\023\064\044\065\051" +
    "\066\036\067\020\070\010\071\034\075\012\076\050\077" +
    "\035\100\043\101\021\102\032\103\022\104\007\105\011" +
    "\106\015\107\033\001\002\000\064\002\uffdc\016\uffdc\034" +
    "\uffdc\045\uffdc\046\uffdc\060\uffdc\061\uffdc\063\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc" +
    "\105\uffdc\106\uffdc\107\uffdc\001\002\000\062\013\067\035" +
    "\074\036\107\047\064\050\066\051\105\052\075\072\070" +
    "\073\065\074\063\075\012\076\050\077\035\100\043\101" +
    "\021\102\032\103\022\104\007\105\011\106\015\107\072" +
    "\110\106\111\073\112\077\001\002\000\010\006\114\007" +
    "\115\014\316\001\002\000\042\006\uff90\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\014\uff90\016\uff90\017\uff90\020\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\027\uff90\030\uff90\031\uff90" +
    "\001\002\000\062\013\067\035\074\036\107\047\064\050" +
    "\066\051\105\052\075\072\070\073\065\074\063\075\012" +
    "\076\050\077\035\100\043\101\021\102\032\103\022\104" +
    "\007\105\011\106\015\107\072\110\106\111\073\112\077" +
    "\001\002\000\010\006\114\007\115\014\321\001\002\000" +
    "\042\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\014\uff92" +
    "\016\uff92\017\uff92\020\uff92\022\uff92\023\uff92\024\uff92\025" +
    "\uff92\027\uff92\030\uff92\031\uff92\001\002\000\004\014\323" +
    "\001\002\000\042\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012" +
    "\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d\022\uff8d\023\uff8d" +
    "\024\uff8d\025\uff8d\027\uff8d\030\uff8d\031\uff8d\001\002\000" +
    "\062\013\067\035\074\036\107\047\064\050\066\051\105" +
    "\052\075\072\070\073\065\074\063\075\012\076\050\077" +
    "\035\100\043\101\021\102\032\103\022\104\007\105\011" +
    "\106\015\107\072\110\106\111\073\112\077\001\002\000" +
    "\010\006\114\007\115\014\326\001\002\000\042\006\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\014\uff96\016\uff96\017" +
    "\uff96\020\uff96\022\uff96\023\uff96\024\uff96\025\uff96\027\uff96" +
    "\030\uff96\031\uff96\001\002\000\062\013\067\035\074\036" +
    "\107\047\064\050\066\051\105\052\075\072\070\073\065" +
    "\074\063\075\012\076\050\077\035\100\043\101\021\102" +
    "\032\103\022\104\007\105\011\106\015\107\072\110\106" +
    "\111\073\112\077\001\002\000\010\006\114\007\115\014" +
    "\331\001\002\000\042\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\012\uff8e\014\uff8e\016\uff8e\017\uff8e\020\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\027\uff8e\030\uff8e\031\uff8e\001\002" +
    "\000\004\013\333\001\002\000\006\014\335\107\334\001" +
    "\002\000\004\015\361\001\002\000\006\015\343\033\uffe2" +
    "\001\002\000\006\014\341\031\340\001\002\000\006\014" +
    "\ufffc\031\ufffc\001\002\000\004\107\334\001\002\000\006" +
    "\015\343\033\uffe2\001\002\000\004\033\351\001\002\000" +
    "\014\037\346\040\345\041\344\042\347\043\350\001\002" +
    "\000\004\033\uffe4\001\002\000\004\033\uffe5\001\002\000" +
    "\004\033\uffe6\001\002\000\004\033\uffe3\001\002\000\004" +
    "\033\uffe7\001\002\000\062\016\ufffe\034\ufffe\045\ufffe\046" +
    "\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076\ufffe\077\ufffe\100" +
    "\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe" +
    "\107\ufffe\001\002\000\062\016\uffd9\034\353\045\014\046" +
    "\045\060\037\061\031\063\023\064\044\065\051\066\036" +
    "\067\020\070\010\071\034\075\012\076\050\077\035\100" +
    "\043\101\021\102\032\103\022\104\007\105\011\106\015" +
    "\107\033\001\002\000\064\002\uffe9\016\uffe9\034\uffe9\045" +
    "\uffe9\046\uffe9\060\uffe9\061\uffe9\063\uffe9\064\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\075\uffe9\076\uffe9\077" +
    "\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9" +
    "\106\uffe9\107\uffe9\001\002\000\006\014\ufffd\031\ufffd\001" +
    "\002\000\004\033\356\001\002\000\062\016\ufffe\034\ufffe" +
    "\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105" +
    "\ufffe\106\ufffe\107\ufffe\001\002\000\062\016\uffd9\034\360" +
    "\045\014\046\045\060\037\061\031\063\023\064\044\065" +
    "\051\066\036\067\020\070\010\071\034\075\012\076\050" +
    "\077\035\100\043\101\021\102\032\103\022\104\007\105" +
    "\011\106\015\107\033\001\002\000\064\002\uffe8\016\uffe8" +
    "\034\uffe8\045\uffe8\046\uffe8\060\uffe8\061\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\075\uffe8" +
    "\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104" +
    "\uffe8\105\uffe8\106\uffe8\107\uffe8\001\002\000\012\037\365" +
    "\040\363\041\362\042\366\001\002\000\012\014\ufff8\016" +
    "\ufff8\026\ufff8\031\ufff8\001\002\000\012\014\ufff9\016\ufff9" +
    "\026\ufff9\031\ufff9\001\002\000\006\014\ufffb\031\ufffb\001" +
    "\002\000\012\014\ufffa\016\ufffa\026\ufffa\031\ufffa\001\002" +
    "\000\012\014\ufff7\016\ufff7\026\ufff7\031\ufff7\001\002\000" +
    "\062\013\067\035\074\036\107\047\064\050\066\051\105" +
    "\052\075\072\070\073\065\074\063\075\012\076\050\077" +
    "\035\100\043\101\021\102\032\103\022\104\007\105\011" +
    "\106\015\107\072\110\106\111\073\112\077\001\002\000" +
    "\010\006\114\007\115\031\371\001\002\000\062\013\067" +
    "\035\074\036\107\047\064\050\066\051\105\052\075\072" +
    "\070\073\065\074\063\075\012\076\050\077\035\100\043" +
    "\101\021\102\032\103\022\104\007\105\011\106\015\107" +
    "\072\110\106\111\073\112\077\001\002\000\010\006\114" +
    "\007\115\014\373\001\002\000\042\006\uff8f\007\uff8f\010" +
    "\uff8f\011\uff8f\012\uff8f\014\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\025\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\001\002\000\012\015\u0101\016\uffce\026\uffce\031\uffce" +
    "\001\002\000\006\016\uffd4\031\376\001\002\000\004\107" +
    "\377\001\002\000\012\015\u0101\016\uffce\026\uffce\031\uffce" +
    "\001\002\000\010\016\uffd2\026\u0103\031\uffd2\001\002\000" +
    "\012\037\365\040\363\041\362\042\366\001\002\000\010" +
    "\016\uffcf\026\uffcf\031\uffcf\001\002\000\064\013\067\021" +
    "\071\035\074\036\107\047\064\050\066\051\105\052\075" +
    "\072\070\073\065\074\063\075\012\076\050\077\035\100" +
    "\043\101\021\102\032\103\022\104\007\105\011\106\015" +
    "\107\072\110\106\111\073\112\077\001\002\000\010\016" +
    "\uffd3\030\127\031\uffd3\001\002\000\010\016\uffd1\026\u0106" +
    "\031\uffd1\001\002\000\064\013\067\021\071\035\074\036" +
    "\107\047\064\050\066\051\105\052\075\072\070\073\065" +
    "\074\063\075\012\076\050\077\035\100\043\101\021\102" +
    "\032\103\022\104\007\105\011\106\015\107\072\110\106" +
    "\111\073\112\077\001\002\000\010\016\uffd0\030\127\031" +
    "\uffd0\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\042\003\015\010\027\011\051\012\023\013\052" +
    "\014\012\015\016\016\040\022\005\026\025\027\037\031" +
    "\026\042\024\043\041\044\045\046\046\001\001\000\004" +
    "\021\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\023" +
    "\061\027\075\032\112\033\111\034\110\035\107\036\234" +
    "\037\101\040\100\041\077\046\046\047\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\055\001\001\000\042\003\015\010\027\011\051\012" +
    "\023\013\052\014\012\015\016\016\040\022\005\026\025" +
    "\027\037\031\026\042\024\043\041\044\045\046\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\023\061" +
    "\027\075\032\112\033\111\034\110\035\107\036\103\037" +
    "\101\040\100\041\077\046\046\047\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\061\027\075\032\202" +
    "\033\111\034\110\035\107\046\046\047\102\001\001\000" +
    "\002\001\001\000\024\023\061\027\075\032\112\033\111" +
    "\034\110\035\107\041\201\046\046\047\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\023\061\027\075\033" +
    "\124\034\110\035\107\046\046\047\102\001\001\000\020" +
    "\023\061\027\075\033\115\034\110\035\107\046\046\047" +
    "\102\001\001\000\002\001\001\000\016\023\061\027\075" +
    "\034\123\035\107\046\046\047\102\001\001\000\016\023" +
    "\061\027\075\034\122\035\107\046\046\047\102\001\001" +
    "\000\016\023\061\027\075\034\121\035\107\046\046\047" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\023" +
    "\061\027\075\032\112\033\111\034\110\035\107\037\127" +
    "\040\100\041\077\046\046\047\102\001\001\000\002\001" +
    "\001\000\026\023\061\027\075\032\112\033\111\034\110" +
    "\035\107\040\131\041\077\046\046\047\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\023\061\027\075" +
    "\032\146\033\111\034\110\035\107\046\046\047\102\001" +
    "\001\000\022\023\061\027\075\032\145\033\111\034\110" +
    "\035\107\046\046\047\102\001\001\000\022\023\061\027" +
    "\075\032\144\033\111\034\110\035\107\046\046\047\102" +
    "\001\001\000\022\023\061\027\075\032\143\033\111\034" +
    "\110\035\107\046\046\047\102\001\001\000\022\023\061" +
    "\027\075\032\142\033\111\034\110\035\107\046\046\047" +
    "\102\001\001\000\022\023\061\027\075\032\141\033\111" +
    "\034\110\035\107\046\046\047\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\061\027\075\032\157\033\111\034\110\035\107" +
    "\046\046\047\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\061" +
    "\027\075\032\164\033\111\034\110\035\107\046\046\047" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\023\061\027\075\030" +
    "\175\032\112\033\111\034\110\035\107\036\174\037\101" +
    "\040\100\041\077\046\046\047\102\001\001\000\004\024" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\023\061\027\075\032" +
    "\112\033\111\034\110\035\107\036\200\037\101\040\100" +
    "\041\077\046\046\047\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\023\061\027\075\032\205\033\111\034" +
    "\110\035\107\046\046\047\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\023\061\027\075\032\210\033" +
    "\111\034\110\035\107\046\046\047\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\023" +
    "\061\027\075\032\112\033\111\034\110\035\107\036\214" +
    "\037\101\040\100\041\077\046\046\047\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\217\001\001" +
    "\000\042\003\015\010\027\011\051\012\023\013\052\014" +
    "\012\015\016\016\040\022\005\026\025\027\037\031\026" +
    "\042\024\043\041\044\045\046\046\001\001\000\002\001" +
    "\001\000\022\023\061\027\075\032\222\033\111\034\110" +
    "\035\107\046\046\047\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\023\061\027\075\030\227\032\112\033\111\034\110\035" +
    "\107\036\174\037\101\040\100\041\077\046\046\047\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\061\027\075\032\232\033\111\034\110\035\107\046\046" +
    "\047\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\023\061\027\075\032\112\033\111\034\110\035\107\036" +
    "\240\037\101\040\100\041\077\046\046\047\102\001\001" +
    "\000\002\001\001\000\022\023\061\027\075\032\242\033" +
    "\111\034\110\035\107\046\046\047\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\023\061\027\075\032" +
    "\112\033\111\034\110\035\107\036\245\037\101\040\100" +
    "\041\077\046\046\047\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\250\001\001\000\042\003\015" +
    "\010\027\011\051\012\023\013\052\014\012\015\016\016" +
    "\040\022\005\026\025\027\037\031\026\042\024\043\041" +
    "\044\045\046\046\001\001\000\004\017\253\001\001\000" +
    "\004\013\255\001\001\000\002\001\001\000\004\004\256" +
    "\001\001\000\002\001\001\000\042\003\015\010\027\011" +
    "\051\012\023\013\052\014\012\015\016\016\040\022\005" +
    "\026\025\027\037\031\026\042\024\043\041\044\045\046" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\267\012\266\022\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\023\061\027\075\032" +
    "\112\033\111\034\110\035\107\036\271\037\101\040\100" +
    "\041\077\046\046\047\102\001\001\000\002\001\001\000" +
    "\010\012\274\020\276\026\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\301\001\001\000\042\003\015" +
    "\010\027\011\051\012\023\013\052\014\012\015\016\016" +
    "\040\022\005\026\025\027\037\031\026\042\024\043\041" +
    "\044\045\046\046\001\001\000\002\001\001\000\032\023" +
    "\061\027\075\032\112\033\111\034\110\035\107\036\304" +
    "\037\101\040\100\041\077\046\046\047\102\001\001\000" +
    "\002\001\001\000\010\012\274\020\306\026\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\311\001" +
    "\001\000\042\003\015\010\027\011\051\012\023\013\052" +
    "\014\012\015\016\016\040\022\005\026\025\027\037\031" +
    "\026\042\024\043\041\044\045\046\046\001\001\000\002" +
    "\001\001\000\022\023\061\027\075\032\314\033\111\034" +
    "\110\035\107\046\046\047\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\023\061\027\075\032\317\033" +
    "\111\034\110\035\107\046\046\047\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\023\061\027\075\032\324\033\111\034\110" +
    "\035\107\046\046\047\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\061\027\075\032\327\033\111" +
    "\034\110\035\107\046\046\047\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\335" +
    "\006\336\001\001\000\002\001\001\000\004\045\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\353" +
    "\001\001\000\004\045\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\351\001\001\000\042\003\015\010\027\011\051\012\023" +
    "\013\052\014\012\015\016\016\040\022\005\026\025\027" +
    "\037\031\026\042\024\043\041\044\045\046\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\356\001\001\000\042\003\015\010\027\011\051" +
    "\012\023\013\052\014\012\015\016\016\040\022\005\026" +
    "\025\027\037\031\026\042\024\043\041\044\045\046\046" +
    "\001\001\000\002\001\001\000\004\007\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\023\061\027\075\032" +
    "\367\033\111\034\110\035\107\046\046\047\102\001\001" +
    "\000\002\001\001\000\022\023\061\027\075\032\371\033" +
    "\111\034\110\035\107\046\046\047\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\377\001\001" +
    "\000\002\001\001\000\004\007\u0101\001\001\000\002\001" +
    "\001\000\032\023\061\027\075\032\112\033\111\034\110" +
    "\035\107\036\u0103\037\101\040\100\041\077\046\046\047" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\023\061\027\075\032\112\033\111\034\110\035\107\036" +
    "\u0106\037\101\040\100\041\077\046\046\047\102\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public TSParser(TSLexer lexer){
        super(lexer);

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TSParser$actions {
  private final TSParser parser;

  /** Constructor */
  CUP$TSParser$actions(TSParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TSParser$do_action_part00000000(
    int                        CUP$TSParser$act_num,
    java_cup.runtime.lr_parser CUP$TSParser$parser,
    java.util.Stack            CUP$TSParser$stack,
    int                        CUP$TSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TSParser$result;

      /* select the action based on the action number */
      switch (CUP$TSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = start_val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TSParser$parser.done_parsing();
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= instructions 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instructions",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instructions",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parameters ::= parameters COMMA parameter 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameters",3, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameters",3, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parameter ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameter",4, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= NUMBER 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BIGINT 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= declarationInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= funInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= assignmentInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= ifInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= forInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= whileInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= doWhileInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= inDecInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= callFunction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= consoleInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= continueInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= breakInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= returnInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funInstruction ::= FUNCTION ID LPAREN parameters RPAREN returnType LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("funInstruction",1, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funInstruction ::= FUNCTION ID LPAREN RPAREN returnType LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("funInstruction",1, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // returnType ::= COLON VOID 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // returnType ::= COLON NUMBER 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // returnType ::= COLON BIGINT 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // returnType ::= COLON STRING 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // returnType ::= COLON BOOLEAN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // returnType ::= 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnType",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ifInstruction ::= IF LPAREN w RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ifInstruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifInstruction ::= IF LPAREN w RPAREN LBRACE instructions RBRACE elseIfInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ifInstruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elseIfInstruction ::= ELSE ifInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("elseIfInstruction",13, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elseIfInstruction ::= ELSE LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("elseIfInstruction",13, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // forInstruction ::= FOR LPAREN declarationInstruction SEMICOLON w SEMICOLON assignmentInDec RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("forInstruction",10, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // forInstruction ::= FOR LPAREN assignmentInstruction SEMICOLON w SEMICOLON assignmentInDec RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("forInstruction",10, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignmentInDec ::= inDecInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInDec",14, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignmentInDec ::= assignmentInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInDec",14, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inDecInstruction ::= 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",20, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inDecInstruction ::= ID INCREMENT 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",20, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inDecInstruction ::= ID DECREMENT 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",20, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // whileInstruction ::= WHILE LPAREN w RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("whileInstruction",11, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // doWhileInstruction ::= DO LBRACE instructions RBRACE WHILE LPAREN w RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("doWhileInstruction",12, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declarationInstruction ::= varType declarationList 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationInstruction",7, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declarationList ::= declarationList COMMA ID idType ASSIGN w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",15, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declarationList ::= declarationList COMMA ID idType 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",15, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declarationList ::= ID idType 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",15, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declarationList ::= ID idType ASSIGN w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",15, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // idType ::= COLON type 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("idType",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // idType ::= 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("idType",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varType ::= LET 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("varType",16, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varType ::= CONST 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("varType",16, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignmentInstruction ::= ID ASSIGN w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInstruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // callFunction ::= ID LPAREN ids RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // callFunction ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // callFunction ::= mathFun 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ids ::= ids COMMA w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ids",22, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ids ::= w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ids",22, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // consoleInstruction ::= CONSOLE_LOG LPAREN ids RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("consoleInstruction",23, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // continueInstruction ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("continueInstruction",32, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // breakInstruction ::= BREAK 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("breakInstruction",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // returnInstruction ::= RETURN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnInstruction",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // returnInstruction ::= RETURN w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnInstruction",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // w ::= w OR x 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("w",28, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // w ::= x 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("w",28, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // x ::= x AND y 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("x",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // x ::= y 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("x",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // y ::= NOT z 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("y",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // y ::= z 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("y",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // z ::= z EQUALS a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // z ::= z NOT_EQUALS a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // z ::= z LESS a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // z ::= z GREATER a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // z ::= z LESS_EQ a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // z ::= z GREATER_EQ a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // z ::= a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // a ::= a PLUS b 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // a ::= a MINUS b 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // a ::= b 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // b ::= b TIMES c 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // b ::= b DIVIDE c 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // b ::= b MOD c 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // b ::= c 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // c ::= castFun LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("c",26, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // c ::= d 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("c",26, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // d ::= NUMBER_VALUE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // d ::= BIGINT_VALUE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // d ::= TRUE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // d ::= FALSE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // d ::= STRING_VALUE DOT stringFun 
            {
              Object RESULT =null;
		System.out.println("Entrando a string con dot");
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // d ::= STRING_VALUE 
            {
              Object RESULT =null;
		System.out.println("Entrando a string");
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // d ::= ID 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // d ::= ID DOT stringFun 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // d ::= callFunction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // d ::= mathConst 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // d ::= LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // castFun ::= NUMBER_FUN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // castFun ::= BIGINT_FUN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // castFun ::= STRING_FUN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // castFun ::= BOOLEAN_FUN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stringFun ::= LENGTH 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stringFun ::= CHAR_AT LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stringFun ::= LOWER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stringFun ::= UPPER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stringFun ::= CONCAT LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // mathFun ::= ABS LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // mathFun ::= CEIL LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // mathFun ::= COS LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mathFun ::= SIN LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // mathFun ::= TAN LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // mathFun ::= EXP LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // mathFun ::= FLOOR LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // mathFun ::= POW LPAREN a COMMA a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // mathFun ::= SQRT LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // mathFun ::= RANDOM LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathFun",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // mathConst ::= E 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathConst",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // mathConst ::= PI 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathConst",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // mathConst ::= SQRT_TWO 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("mathConst",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TSParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TSParser$do_action(
    int                        CUP$TSParser$act_num,
    java_cup.runtime.lr_parser CUP$TSParser$parser,
    java.util.Stack            CUP$TSParser$stack,
    int                        CUP$TSParser$top)
    throws java.lang.Exception
    {
              return CUP$TSParser$do_action_part00000000(
                               CUP$TSParser$act_num,
                               CUP$TSParser$parser,
                               CUP$TSParser$stack,
                               CUP$TSParser$top);
    }
}

}
