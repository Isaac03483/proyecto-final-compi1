
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.typeSecure.compiler.parser;

import com.mio.typeSecure.compiler.lexer.TSLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TSParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public TSParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TSParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\002\000\002\007\005\000\002\007\003" +
    "\000\002\010\005\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\004\000\002" +
    "\012\003\000\002\012\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\005\012\000\002" +
    "\005\011\000\002\015\011\000\002\015\012\000\002\021" +
    "\004\000\002\021\006\000\002\016\015\000\002\016\015" +
    "\000\002\022\003\000\002\022\003\000\002\031\002\000" +
    "\002\031\004\000\002\031\004\000\002\017\011\000\002" +
    "\020\013\000\002\013\004\000\002\023\010\000\002\023" +
    "\006\000\002\023\004\000\002\023\006\000\002\030\004" +
    "\000\002\030\002\000\002\024\003\000\002\024\003\000" +
    "\002\014\005\000\002\032\006\000\002\032\005\000\002" +
    "\033\005\000\002\033\003\000\002\034\006\000\002\045" +
    "\003\000\002\046\003\000\002\047\003\000\002\047\004" +
    "\000\002\041\005\000\002\041\003\000\002\042\005\000" +
    "\002\042\003\000\002\043\004\000\002\043\003\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\003" +
    "\000\002\035\005\000\002\035\005\000\002\035\003\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\003\000\002\037\006\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\005\000\002\040\003\000\002\040\005\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\027\003\000\002\027\006\000\002\027\005" +
    "\000\002\027\005\000\002\027\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\036\002\ufffe\016\ufffe\045\ufffe\046\ufffe\060" +
    "\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe" +
    "\070\ufffe\071\ufffe\107\ufffe\001\002\000\004\002\322\001" +
    "\002\000\036\002\000\016\uffdf\045\027\046\031\060\013" +
    "\061\020\063\035\064\012\065\023\066\025\067\006\070" +
    "\016\071\014\107\021\001\002\000\004\016\uffcb\001\002" +
    "\000\004\016\321\001\002\000\004\016\320\001\002\000" +
    "\004\016\317\001\002\000\004\013\311\001\002\000\004" +
    "\013\306\001\002\000\034\013\056\016\uffc9\021\051\035" +
    "\054\036\067\047\065\050\052\051\075\052\072\107\061" +
    "\110\053\111\055\112\066\001\002\000\004\016\304\001" +
    "\002\000\004\107\263\001\002\000\004\016\262\001\002" +
    "\000\004\013\246\001\002\000\012\004\147\005\146\013" +
    "\152\026\150\001\002\000\004\107\226\001\002\000\004" +
    "\033\216\001\002\000\040\002\ufff0\016\ufff0\034\ufff0\045" +
    "\ufff0\046\ufff0\060\ufff0\061\ufff0\063\ufff0\064\ufff0\065\ufff0" +
    "\066\ufff0\067\ufff0\070\ufff0\071\ufff0\107\ufff0\001\002\000" +
    "\004\016\uffca\001\002\000\040\002\ufff3\016\ufff3\034\ufff3" +
    "\045\ufff3\046\ufff3\060\ufff3\061\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\107\ufff3\001\002" +
    "\000\004\107\uffd2\001\002\000\004\016\215\001\002\000" +
    "\004\107\uffd3\001\002\000\040\002\ufff1\016\ufff1\034\ufff1" +
    "\045\ufff1\046\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\107\ufff1\001\002" +
    "\000\040\002\ufff5\016\ufff5\034\ufff5\045\ufff5\046\ufff5\060" +
    "\ufff5\061\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\107\ufff5\001\002\000\040\002\uffff\016" +
    "\uffff\034\uffff\045\uffff\046\uffff\060\uffff\061\uffff\063\uffff" +
    "\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff\107" +
    "\uffff\001\002\000\004\013\043\001\002\000\004\016\042" +
    "\001\002\000\040\002\ufff2\016\ufff2\034\ufff2\045\ufff2\046" +
    "\ufff2\060\ufff2\061\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\070\ufff2\071\ufff2\107\ufff2\001\002\000\004\016" +
    "\041\001\002\000\040\002\uffed\016\uffed\034\uffed\045\uffed" +
    "\046\uffed\060\uffed\061\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\107\uffed\001\002\000\040" +
    "\002\ufff6\016\ufff6\034\ufff6\045\ufff6\046\ufff6\060\ufff6\061" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\071\ufff6\107\ufff6\001\002\000\010\045\027\046\031\107" +
    "\044\001\002\000\004\026\150\001\002\000\004\016\205" +
    "\001\002\000\004\016\047\001\002\000\032\013\056\021" +
    "\051\035\054\036\067\047\065\050\052\051\075\052\072" +
    "\107\061\110\053\111\055\112\066\001\002\000\042\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\014\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\001\002\000\030\013\056\035\054" +
    "\036\067\047\065\050\052\051\075\052\072\107\061\110" +
    "\053\111\055\112\066\001\002\000\004\013\uffa6\001\002" +
    "\000\042\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\014" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\027\uffb1\030\uffb1\031\uffb1\001\002\000\042\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\014\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\001\002\000\042\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\014\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\001\002\000\030\013\056\035\054\036\067\047" +
    "\065\050\052\051\075\052\072\107\061\110\053\111\055" +
    "\112\066\001\002\000\004\013\177\001\002\000\030\014" +
    "\uffc2\016\uffc2\017\163\020\167\022\170\023\165\024\166" +
    "\025\164\027\uffc2\030\uffc2\031\uffc2\001\002\000\046\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\152\014\uffab" +
    "\016\uffab\017\uffab\020\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\153\001\002\000\014" +
    "\014\uffc4\016\uffc4\027\uffc4\030\uffc4\031\uffc4\001\002\000" +
    "\014\014\uffc6\016\uffc6\027\134\030\uffc6\031\uffc6\001\002" +
    "\000\006\016\131\030\132\001\002\000\004\013\uffa7\001" +
    "\002\000\044\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\110\001\002" +
    "\000\042\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\014" +
    "\uffae\016\uffae\017\uffae\020\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\027\uffae\030\uffae\031\uffae\001\002\000\042\006" +
    "\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\001\002\000\042\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\014\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\001\002\000\004\013\uffa4\001\002\000\042\006" +
    "\uffb8\007\uffb8\010\103\011\102\012\101\014\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\001\002\000\034\006\076\007\077" +
    "\014\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\001\002\000\004" +
    "\013\uffa5\001\002\000\030\013\056\035\054\036\067\047" +
    "\065\050\052\051\075\052\072\107\061\110\053\111\055" +
    "\112\066\001\002\000\030\013\056\035\054\036\067\047" +
    "\065\050\052\051\075\052\072\107\061\110\053\111\055" +
    "\112\066\001\002\000\042\006\uffb9\007\uffb9\010\103\011" +
    "\102\012\101\014\uffb9\016\uffb9\017\uffb9\020\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\001" +
    "\002\000\030\013\056\035\054\036\067\047\065\050\052" +
    "\051\075\052\072\107\061\110\053\111\055\112\066\001" +
    "\002\000\030\013\056\035\054\036\067\047\065\050\052" +
    "\051\075\052\072\107\061\110\053\111\055\112\066\001" +
    "\002\000\030\013\056\035\054\036\067\047\065\050\052" +
    "\051\075\052\072\107\061\110\053\111\055\112\066\001" +
    "\002\000\042\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\014\uffb7\016\uffb7\017\uffb7\020\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\001\002\000\042" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\001\002\000\042\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\001\002\000\042\006\uffba\007\uffba\010\103" +
    "\011\102\012\101\014\uffba\016\uffba\017\uffba\020\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\027\uffba\030\uffba\031\uffba" +
    "\001\002\000\014\053\114\054\112\055\111\056\115\057" +
    "\116\001\002\000\004\013\127\001\002\000\004\013\124" +
    "\001\002\000\042\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\014\uffad\016\uffad\017\uffad\020\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\027\uffad\030\uffad\031\uffad\001\002\000" +
    "\042\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\001\002\000\004\013\122" +
    "\001\002\000\004\013\117\001\002\000\030\013\056\035" +
    "\054\036\067\047\065\050\052\051\075\052\072\107\061" +
    "\110\053\111\055\112\066\001\002\000\010\006\076\007" +
    "\077\014\121\001\002\000\042\006\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\014\uff9f\016\uff9f\017\uff9f\020\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\001\002\000\004\014\123\001\002\000\042\006\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\014\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\001\002\000\030\013\056\035\054\036\067" +
    "\047\065\050\052\051\075\052\072\107\061\110\053\111" +
    "\055\112\066\001\002\000\010\006\076\007\077\014\126" +
    "\001\002\000\042\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\014\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\001\002\000" +
    "\004\014\130\001\002\000\042\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\001\002\000\006\014\uffdf\107\136\001\002\000\032\013" +
    "\056\021\051\035\054\036\067\047\065\050\052\051\075" +
    "\052\072\107\061\110\053\111\055\112\066\001\002\000" +
    "\014\014\uffc7\016\uffc7\027\134\030\uffc7\031\uffc7\001\002" +
    "\000\032\013\056\021\051\035\054\036\067\047\065\050" +
    "\052\051\075\052\072\107\061\110\053\111\055\112\066" +
    "\001\002\000\014\014\uffc5\016\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\001\002\000\010\004\147\005\146\026\150\001\002" +
    "\000\004\014\uffe0\001\002\000\004\014\uffe1\001\002\000" +
    "\004\014\142\001\002\000\004\033\143\001\002\000\036" +
    "\016\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\107\ufffe\001\002\000\036\016\uffdf\034\145\045\027\046" +
    "\031\060\013\061\020\063\035\064\012\065\023\066\025" +
    "\067\006\070\016\071\014\107\021\001\002\000\040\002" +
    "\uffe3\016\uffe3\034\uffe3\045\uffe3\046\uffe3\060\uffe3\061\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\107\uffe3\001\002\000\006\014\uffdd\016\uffdd\001\002" +
    "\000\006\014\uffde\016\uffde\001\002\000\032\013\056\021" +
    "\051\035\054\036\067\047\065\050\052\051\075\052\072" +
    "\107\061\110\053\111\055\112\066\001\002\000\010\014" +
    "\uffd1\016\uffd1\030\132\001\002\000\034\013\056\014\155" +
    "\021\051\035\054\036\067\047\065\050\052\051\075\052" +
    "\072\107\061\110\053\111\055\112\066\001\002\000\014" +
    "\053\114\054\112\055\111\056\115\057\116\001\002\000" +
    "\042\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\001\002\000\042\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\001\002\000\010\014\uffcd\030\132\031" +
    "\uffcd\001\002\000\006\014\161\031\160\001\002\000\032" +
    "\013\056\021\051\035\054\036\067\047\065\050\052\051" +
    "\075\052\072\107\061\110\053\111\055\112\066\001\002" +
    "\000\042\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\014" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\027\uffd0\030\uffd0\031\uffd0\001\002\000\010\014" +
    "\uffce\030\132\031\uffce\001\002\000\030\013\056\035\054" +
    "\036\067\047\065\050\052\051\075\052\072\107\061\110" +
    "\053\111\055\112\066\001\002\000\030\013\056\035\054" +
    "\036\067\047\065\050\052\051\075\052\072\107\061\110" +
    "\053\111\055\112\066\001\002\000\030\013\056\035\054" +
    "\036\067\047\065\050\052\051\075\052\072\107\061\110" +
    "\053\111\055\112\066\001\002\000\030\013\056\035\054" +
    "\036\067\047\065\050\052\051\075\052\072\107\061\110" +
    "\053\111\055\112\066\001\002\000\030\013\056\035\054" +
    "\036\067\047\065\050\052\051\075\052\072\107\061\110" +
    "\053\111\055\112\066\001\002\000\030\013\056\035\054" +
    "\036\067\047\065\050\052\051\075\052\072\107\061\110" +
    "\053\111\055\112\066\001\002\000\034\006\076\007\077" +
    "\014\uffbc\016\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\001\002\000\034" +
    "\006\076\007\077\014\uffc0\016\uffc0\017\uffc0\020\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\001\002\000\034\006\076\007\077\014\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\001\002\000\034\006\076\007\077\014" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\027\uffbd\030\uffbd\031\uffbd\001\002\000\034\006" +
    "\076\007\077\014\uffbe\016\uffbe\017\uffbe\020\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\001" +
    "\002\000\034\006\076\007\077\014\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\001\002\000\030\013\056\035\054\036\067" +
    "\047\065\050\052\051\075\052\072\107\061\110\053\111" +
    "\055\112\066\001\002\000\010\006\076\007\077\014\201" +
    "\001\002\000\042\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\014\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\001\002\000" +
    "\010\006\076\007\077\014\203\001\002\000\042\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\001\002\000\030\014\uffc3\016\uffc3\017" +
    "\163\020\167\022\170\023\165\024\166\025\164\027\uffc3" +
    "\030\uffc3\031\uffc3\001\002\000\032\013\056\021\051\035" +
    "\054\036\067\047\065\050\052\051\075\052\072\107\061" +
    "\110\053\111\055\112\066\001\002\000\006\016\207\030" +
    "\132\001\002\000\006\014\uffdf\107\136\001\002\000\004" +
    "\014\211\001\002\000\004\033\212\001\002\000\036\016" +
    "\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\107" +
    "\ufffe\001\002\000\036\016\uffdf\034\214\045\027\046\031" +
    "\060\013\061\020\063\035\064\012\065\023\066\025\067" +
    "\006\070\016\071\014\107\021\001\002\000\040\002\uffe2" +
    "\016\uffe2\034\uffe2\045\uffe2\046\uffe2\060\uffe2\061\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2" +
    "\107\uffe2\001\002\000\040\002\uffec\016\uffec\034\uffec\045" +
    "\uffec\046\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\070\uffec\071\uffec\107\uffec\001\002\000" +
    "\036\016\ufffe\034\ufffe\045\ufffe\046\ufffe\060\ufffe\061\ufffe" +
    "\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071" +
    "\ufffe\107\ufffe\001\002\000\036\016\uffdf\034\220\045\027" +
    "\046\031\060\013\061\020\063\035\064\012\065\023\066" +
    "\025\067\006\070\016\071\014\107\021\001\002\000\004" +
    "\064\221\001\002\000\004\013\222\001\002\000\032\013" +
    "\056\021\051\035\054\036\067\047\065\050\052\051\075" +
    "\052\072\107\061\110\053\111\055\112\066\001\002\000" +
    "\006\014\224\030\132\001\002\000\004\016\225\001\002" +
    "\000\040\002\uffdb\016\uffdb\034\uffdb\045\uffdb\046\uffdb\060" +
    "\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\107\uffdb\001\002\000\012\015\233\016" +
    "\uffd4\026\uffd4\031\uffd4\001\002\000\006\016\uffda\031\230" +
    "\001\002\000\004\107\231\001\002\000\012\015\233\016" +
    "\uffd4\026\uffd4\031\uffd4\001\002\000\010\016\uffd8\026\241" +
    "\031\uffd8\001\002\000\012\037\237\040\235\041\234\042" +
    "\240\001\002\000\012\014\ufff8\016\ufff8\026\ufff8\031\ufff8" +
    "\001\002\000\012\014\ufff9\016\ufff9\026\ufff9\031\ufff9\001" +
    "\002\000\010\016\uffd5\026\uffd5\031\uffd5\001\002\000\012" +
    "\014\ufffa\016\ufffa\026\ufffa\031\ufffa\001\002\000\012\014" +
    "\ufff7\016\ufff7\026\ufff7\031\ufff7\001\002\000\032\013\056" +
    "\021\051\035\054\036\067\047\065\050\052\051\075\052" +
    "\072\107\061\110\053\111\055\112\066\001\002\000\010" +
    "\016\uffd9\030\132\031\uffd9\001\002\000\010\016\uffd7\026" +
    "\244\031\uffd7\001\002\000\032\013\056\021\051\035\054" +
    "\036\067\047\065\050\052\051\075\052\072\107\061\110" +
    "\053\111\055\112\066\001\002\000\010\016\uffd6\030\132" +
    "\031\uffd6\001\002\000\032\013\056\021\051\035\054\036" +
    "\067\047\065\050\052\051\075\052\072\107\061\110\053" +
    "\111\055\112\066\001\002\000\006\014\250\030\132\001" +
    "\002\000\004\033\251\001\002\000\036\016\ufffe\034\ufffe" +
    "\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\107\ufffe\001\002" +
    "\000\036\016\uffdf\034\253\045\027\046\031\060\013\061" +
    "\020\063\035\064\012\065\023\066\025\067\006\070\016" +
    "\071\014\107\021\001\002\000\042\002\uffe7\016\uffe7\034" +
    "\uffe7\045\uffe7\046\uffe7\060\uffe7\061\uffe7\062\254\063\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\107" +
    "\uffe7\001\002\000\006\033\256\061\020\001\002\000\040" +
    "\002\uffe6\016\uffe6\034\uffe6\045\uffe6\046\uffe6\060\uffe6\061" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\071\uffe6\107\uffe6\001\002\000\036\016\ufffe\034\ufffe\045" +
    "\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\071\ufffe\107\ufffe\001\002\000" +
    "\040\002\uffe5\016\uffe5\034\uffe5\045\uffe5\046\uffe5\060\uffe5" +
    "\061\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\107\uffe5\001\002\000\036\016\uffdf\034\261" +
    "\045\027\046\031\060\013\061\020\063\035\064\012\065" +
    "\023\066\025\067\006\070\016\071\014\107\021\001\002" +
    "\000\040\002\uffe4\016\uffe4\034\uffe4\045\uffe4\046\uffe4\060" +
    "\uffe4\061\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\071\uffe4\107\uffe4\001\002\000\040\002\uffea\016" +
    "\uffea\034\uffea\045\uffea\046\uffea\060\uffea\061\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\107" +
    "\uffea\001\002\000\004\013\264\001\002\000\006\014\266" +
    "\107\265\001\002\000\004\015\302\001\002\000\004\033" +
    "\277\001\002\000\006\014\272\031\271\001\002\000\006" +
    "\014\ufffc\031\ufffc\001\002\000\004\107\265\001\002\000" +
    "\004\033\273\001\002\000\036\016\ufffe\034\ufffe\045\ufffe" +
    "\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\070\ufffe\071\ufffe\107\ufffe\001\002\000\036" +
    "\016\uffdf\034\275\045\027\046\031\060\013\061\020\063" +
    "\035\064\012\065\023\066\025\067\006\070\016\071\014" +
    "\107\021\001\002\000\040\002\uffe9\016\uffe9\034\uffe9\045" +
    "\uffe9\046\uffe9\060\uffe9\061\uffe9\063\uffe9\064\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\107\uffe9\001\002\000" +
    "\006\014\ufffd\031\ufffd\001\002\000\036\016\ufffe\034\ufffe" +
    "\045\ufffe\046\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\107\ufffe\001\002" +
    "\000\036\016\uffdf\034\301\045\027\046\031\060\013\061" +
    "\020\063\035\064\012\065\023\066\025\067\006\070\016" +
    "\071\014\107\021\001\002\000\040\002\uffe8\016\uffe8\034" +
    "\uffe8\045\uffe8\046\uffe8\060\uffe8\061\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\107\uffe8\001" +
    "\002\000\012\037\237\040\235\041\234\042\240\001\002" +
    "\000\006\014\ufffb\031\ufffb\001\002\000\040\002\uffeb\016" +
    "\uffeb\034\uffeb\045\uffeb\046\uffeb\060\uffeb\061\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\107" +
    "\uffeb\001\002\000\006\016\uffc8\030\132\001\002\000\032" +
    "\013\056\021\051\035\054\036\067\047\065\050\052\051" +
    "\075\052\072\107\061\110\053\111\055\112\066\001\002" +
    "\000\006\014\310\031\160\001\002\000\004\016\uffcc\001" +
    "\002\000\032\013\056\021\051\035\054\036\067\047\065" +
    "\050\052\051\075\052\072\107\061\110\053\111\055\112" +
    "\066\001\002\000\006\014\313\030\132\001\002\000\004" +
    "\033\314\001\002\000\036\016\ufffe\034\ufffe\045\ufffe\046" +
    "\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\107\ufffe\001\002\000\036\016" +
    "\uffdf\034\316\045\027\046\031\060\013\061\020\063\035" +
    "\064\012\065\023\066\025\067\006\070\016\071\014\107" +
    "\021\001\002\000\040\002\uffdc\016\uffdc\034\uffdc\045\uffdc" +
    "\046\uffdc\060\uffdc\061\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\071\uffdc\107\uffdc\001\002\000\040" +
    "\002\uffee\016\uffee\034\uffee\045\uffee\046\uffee\060\uffee\061" +
    "\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\107\uffee\001\002\000\040\002\ufff4\016\ufff4\034" +
    "\ufff4\045\ufff4\046\ufff4\060\ufff4\061\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\107\ufff4\001" +
    "\002\000\040\002\uffef\016\uffef\034\uffef\045\uffef\046\uffef" +
    "\060\uffef\061\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067" +
    "\uffef\070\uffef\071\uffef\107\uffef\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\002\003\006\004\001\001\000\002\001" +
    "\001\000\040\005\032\012\033\013\035\014\007\015\025" +
    "\016\036\017\031\020\023\024\021\031\006\032\010\034" +
    "\037\045\027\046\014\047\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\056\032\047" +
    "\035\073\036\072\037\070\040\067\041\304\042\062\043" +
    "\061\044\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\045\014\044\024\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\025\056\032\047\035\073\036\072\037\070\040" +
    "\067\041\063\042\062\043\061\044\057\001\001\000\002" +
    "\001\001\000\020\025\056\032\047\035\073\036\072\037" +
    "\070\040\067\044\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\025" +
    "\056\032\047\035\201\036\072\037\070\040\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\025\056\032" +
    "\047\036\106\037\070\040\067\001\001\000\014\025\056" +
    "\032\047\036\077\037\070\040\067\001\001\000\002\001" +
    "\001\000\012\025\056\032\047\037\105\040\067\001\001" +
    "\000\012\025\056\032\047\037\104\040\067\001\001\000" +
    "\012\025\056\032\047\037\103\040\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\025\056\032\047\035\117" +
    "\036\072\037\070\040\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\025\056\032\047\035\124\036\072\037\070\040\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\136\022\140\031\137\001" +
    "\001\000\024\025\056\032\047\035\073\036\072\037\070" +
    "\040\067\042\132\043\061\044\057\001\001\000\002\001" +
    "\001\000\022\025\056\032\047\035\073\036\072\037\070" +
    "\040\067\043\134\044\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\143\001\001\000" +
    "\040\005\032\012\033\013\035\014\007\015\025\016\036" +
    "\017\031\020\023\024\021\031\006\032\010\034\037\045" +
    "\027\046\014\047\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\025\056\032\047\035" +
    "\073\036\072\037\070\040\067\041\150\042\062\043\061" +
    "\044\057\001\001\000\002\001\001\000\030\025\056\032" +
    "\047\033\156\035\073\036\072\037\070\040\067\041\155" +
    "\042\062\043\061\044\057\001\001\000\004\027\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\025\056\032\047\035\073\036" +
    "\072\037\070\040\067\041\161\042\062\043\061\044\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\025" +
    "\056\032\047\035\175\036\072\037\070\040\067\001\001" +
    "\000\016\025\056\032\047\035\174\036\072\037\070\040" +
    "\067\001\001\000\016\025\056\032\047\035\173\036\072" +
    "\037\070\040\067\001\001\000\016\025\056\032\047\035" +
    "\172\036\072\037\070\040\067\001\001\000\016\025\056" +
    "\032\047\035\171\036\072\037\070\040\067\001\001\000" +
    "\016\025\056\032\047\035\170\036\072\037\070\040\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\025\056\032\047\035\177\036\072\037\070\040" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\025" +
    "\056\032\047\035\073\036\072\037\070\040\067\041\205" +
    "\042\062\043\061\044\057\001\001\000\002\001\001\000" +
    "\010\014\136\022\207\031\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\212\001\001\000\040\005" +
    "\032\012\033\013\035\014\007\015\025\016\036\017\031" +
    "\020\023\024\021\031\006\032\010\034\037\045\027\046" +
    "\014\047\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\216\001\001\000\040\005\032\012\033\013" +
    "\035\014\007\015\025\016\036\017\031\020\023\024\021" +
    "\031\006\032\010\034\037\045\027\046\014\047\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\025\056" +
    "\032\047\035\073\036\072\037\070\040\067\041\222\042" +
    "\062\043\061\044\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\231\001\001" +
    "\000\002\001\001\000\004\011\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\025\056\032\047\035\073\036" +
    "\072\037\070\040\067\041\241\042\062\043\061\044\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\025" +
    "\056\032\047\035\073\036\072\037\070\040\067\041\244" +
    "\042\062\043\061\044\057\001\001\000\002\001\001\000" +
    "\026\025\056\032\047\035\073\036\072\037\070\040\067" +
    "\041\246\042\062\043\061\044\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\251\001\001\000\040" +
    "\005\032\012\033\013\035\014\007\015\025\016\036\017" +
    "\031\020\023\024\021\031\006\032\010\034\037\045\027" +
    "\046\014\047\016\001\001\000\004\021\254\001\001\000" +
    "\004\015\256\001\001\000\002\001\001\000\004\006\257" +
    "\001\001\000\002\001\001\000\040\005\032\012\033\013" +
    "\035\014\007\015\025\016\036\017\031\020\023\024\021" +
    "\031\006\032\010\034\037\045\027\046\014\047\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\266\010\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\275\001\001\000\002\001\001\000\004\006\273\001" +
    "\001\000\040\005\032\012\033\013\035\014\007\015\025" +
    "\016\036\017\031\020\023\024\021\031\006\032\010\034" +
    "\037\045\027\046\014\047\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\277\001\001\000\040\005" +
    "\032\012\033\013\035\014\007\015\025\016\036\017\031" +
    "\020\023\024\021\031\006\032\010\034\037\045\027\046" +
    "\014\047\016\001\001\000\002\001\001\000\004\011\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\025\056\032\047\033\306\035\073\036\072" +
    "\037\070\040\067\041\155\042\062\043\061\044\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\025\056" +
    "\032\047\035\073\036\072\037\070\040\067\041\311\042" +
    "\062\043\061\044\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\314\001\001\000\040\005\032\012" +
    "\033\013\035\014\007\015\025\016\036\017\031\020\023" +
    "\024\021\031\006\032\010\034\037\045\027\046\014\047" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public TSParser(TSLexer lexer){
        super(lexer);

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TSParser$actions {
  private final TSParser parser;

  /** Constructor */
  CUP$TSParser$actions(TSParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TSParser$do_action_part00000000(
    int                        CUP$TSParser$act_num,
    java_cup.runtime.lr_parser CUP$TSParser$parser,
    java.util.Stack            CUP$TSParser$stack,
    int                        CUP$TSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TSParser$result;

      /* select the action based on the action number */
      switch (CUP$TSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = start_val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TSParser$parser.done_parsing();
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= instructions 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instructions",4, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instructions",4, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parameters ::= parameters COMMA parameter 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameters",5, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameters",5, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parameter ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("parameter",6, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= NUMBER 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BIGINT 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= declarationInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= funInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= assignmentInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= ifInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= forInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= whileInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= doWhileInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= inDecInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= callFunction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= consoleInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= continueInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= breakInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= returnInstruction SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funInstruction ::= FUNCTION ID LPAREN parameters RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("funInstruction",3, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funInstruction ::= FUNCTION ID LPAREN RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("funInstruction",3, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ifInstruction ::= IF LPAREN w RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ifInstruction",11, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifInstruction ::= IF LPAREN w RPAREN LBRACE instructions RBRACE elseIfInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ifInstruction",11, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-7)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // elseIfInstruction ::= ELSE ifInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("elseIfInstruction",15, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // elseIfInstruction ::= ELSE LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("elseIfInstruction",15, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // forInstruction ::= FOR LPAREN declarationInstruction SEMICOLON w SEMICOLON assignmentInDec RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("forInstruction",12, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // forInstruction ::= FOR LPAREN assignmentInstruction SEMICOLON w SEMICOLON assignmentInDec RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("forInstruction",12, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-10)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignmentInDec ::= inDecInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInDec",16, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignmentInDec ::= assignmentInstruction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInDec",16, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inDecInstruction ::= 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",23, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inDecInstruction ::= ID INCREMENT 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",23, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inDecInstruction ::= ID DECREMENT 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("inDecInstruction",23, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // whileInstruction ::= WHILE LPAREN w RPAREN LBRACE instructions RBRACE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("whileInstruction",13, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-6)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // doWhileInstruction ::= DO LBRACE instructions RBRACE WHILE LPAREN w RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("doWhileInstruction",14, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-8)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declarationInstruction ::= varType declarationList 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationInstruction",9, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declarationList ::= declarationList COMMA ID idType ASSIGN w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-5)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declarationList ::= declarationList COMMA ID idType 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declarationList ::= ID idType 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declarationList ::= ID idType ASSIGN w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("declarationList",17, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // idType ::= COLON type 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("idType",22, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // idType ::= 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("idType",22, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // varType ::= LET 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("varType",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // varType ::= CONST 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("varType",18, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignmentInstruction ::= ID ASSIGN w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("assignmentInstruction",10, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // callFunction ::= ID LPAREN ids RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // callFunction ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("callFunction",24, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ids ::= ids COMMA w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ids",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ids ::= w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("ids",25, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // consoleInstruction ::= CONSOLE_LOG LPAREN ids RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("consoleInstruction",26, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // continueInstruction ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("continueInstruction",35, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // breakInstruction ::= BREAK 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("breakInstruction",36, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // returnInstruction ::= RETURN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnInstruction",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // returnInstruction ::= RETURN w 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("returnInstruction",37, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // w ::= w OR x 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("w",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // w ::= x 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("w",31, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // x ::= x AND y 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("x",32, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // x ::= y 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("x",32, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // y ::= NOT z 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // y ::= z 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // z ::= z EQUALS a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // z ::= z NOT_EQUALS a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // z ::= z LESS a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // z ::= z GREATER a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // z ::= z LESS_EQ a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // z ::= z GREATER_EQ a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // z ::= a 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // a ::= a PLUS b 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // a ::= a MINUS b 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // a ::= b 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("a",27, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // b ::= b TIMES c 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",28, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // b ::= b DIVIDE c 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",28, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // b ::= b MOD c 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",28, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // b ::= c 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("b",28, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // c ::= castFun LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("c",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // c ::= d 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("c",29, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // d ::= NUMBER_VALUE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // d ::= BIGINT_VALUE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // d ::= TRUE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // d ::= FALSE 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // d ::= STRING_VALUE DOT stringFun 
            {
              Object RESULT =null;
		System.out.println("Entrando a string con dot");
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // d ::= STRING_VALUE 
            {
              Object RESULT =null;
		System.out.println("Entrando a string");
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // d ::= ID 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // d ::= ID DOT stringFun 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // d ::= callFunction 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // d ::= LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("d",30, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // castFun ::= NUMBER_FUN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // castFun ::= BIGINT_FUN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // castFun ::= STRING_FUN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // castFun ::= BOOLEAN_FUN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("castFun",19, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stringFun ::= LENGTH 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stringFun ::= CHAR_AT LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stringFun ::= LOWER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stringFun ::= UPPER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stringFun ::= CONCAT LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("stringFun",21, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TSParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TSParser$do_action(
    int                        CUP$TSParser$act_num,
    java_cup.runtime.lr_parser CUP$TSParser$parser,
    java.util.Stack            CUP$TSParser$stack,
    int                        CUP$TSParser$top)
    throws java.lang.Exception
    {
              return CUP$TSParser$do_action_part00000000(
                               CUP$TSParser$act_num,
                               CUP$TSParser$parser,
                               CUP$TSParser$stack,
                               CUP$TSParser$top);
    }
}

}
