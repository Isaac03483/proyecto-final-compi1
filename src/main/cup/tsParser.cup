package com.mio.typeSecure.compiler.parser;

import com.mio.typeSecure.compiler.Token;
import com.mio.typeSecure.compiler.lexer.TSLexer;
import java_cup.runtime.Symbol;

import java.util.List;


class TSParser;
/*
 java -jar java-cup-11b.jar /home/mio/Escritorio/2023/proyecto-final-compi1/src/main/cup/tsParser.cup
*/
parser code {:

    private List<String> errorList;
    public TSParser(TSLexer lexer, List<String> errorList){
        super(lexer);
        this.errorList = errorList;

    }

    public Symbol scan() throws Exception {
        Symbol symbol = this.getScanner().next_token();
        if (symbol == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        while(symbol != null && symbol.sym == TSParserSym.SYM) {
            this.report_expected_token_ids();
            Token token = (Token) symbol.value;
            errorList.add("Simbolo no forma parte del lenguaje: "+token.value()+", Linea: "+token.line()+" Columna: "+token.column());
            symbol = this.getScanner().next_token();
        }

        if (symbol == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        return symbol;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;


        if (cur_token.sym == TSParserSym.EOF) {
            errorList.add("Simbolo no esperado. Linea: "+token.line()+" Columna: "+token.column());
        } else {
            String tokenVal = token.value() == null? TSParserSym.terminalNames[token.type()]: token.value();
            errorList.add("Simbolo no esperado: "+tokenVal+" Linea: "+token.line()+" Columna: "+token.column());

        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;

        if (cur_token.sym == TSParserSym.EOF) {
            errorList.add("Simbolo no esperado. Linea: "+token.line()+" Columna: "+token.column());

        } else {
            String tokenVal = token.value() == null? TSParserSym.terminalNames[token.type()]: token.value();
            errorList.add("Simbolo no esperado: "+tokenVal+" Linea: "+token.line()+" Columna: "+token.column());

        }
    }
:}


terminal Token INCREMENT, DECREMENT, PLUS, MINUS, TIMES, DIVIDE, MOD, LPAREN, RPAREN, COLON, SEMICOLON;
terminal Token EQUALS, NOT_EQUALS, NOT, GREATER_EQ, LESS_EQ, LESS, GREATER, ASSIGN, AND, OR, COMMA, DOT;
terminal Token LBRACE, RBRACE, TRUE, FALSE, NUMBER, BIGINT, STRING, BOOLEAN, VOID, UNDEFINED, CONST, LET;
terminal Token NUMBER_FUN, BIGINT_FUN, STRING_FUN, BOOLEAN_FUN, LENGTH, CHAR_AT, LOWER, UPPER, CONCAT;
terminal Token CONSOLE_LOG, IF, ELSE, FOR, WHILE, DO, BREAK, CONTINUE, FUNCTION, RETURN, E, PI, SQRT_TWO;
terminal Token ABS, CEIL, COS, SIN, TAN, EXP, FLOOR, POW, SQRT, RANDOM, ID, NUMBER_VALUE, BIGINT_VALUE;
terminal Token STRING_VALUE, SYM, PRINT_AST, SYMBOL_TABLE;

non terminal List<Instruction> main;
non terminal funInstruction, instructions, parameters, parameter,type,instruction;
non terminal declarationInstruction, assignmentInstruction, ifInstruction, forInstruction, whileInstruction;
non terminal doWhileInstruction,elseIfInstruction,assignmentInDec,declarationList,varType;
non terminal stringFun,idType,inDecInstruction, callFunction, ids,consoleInstruction,a,b,c,d,w,x,y,z;
non terminal continueInstruction, breakInstruction, returnInstruction, returnType, mathFun, mathConst;
non terminal Token castFun;

start with main;


main
::= instructions:list
    {:RESULT = list;:}
	;
	
instructions
::=	instructions:list instruction:instruction
    {:RESULT = list; RESULT.add(instruction);:}
    |
    {:RESULT = new ArrayList<>();:}
	;
	
parameters
::=	parameters:list COMMA parameter:p
    {:RESULT = list; RESULT.add(p);:}
	| parameter:p
	{:RESULT = new ArrayList<>(); RESULT.add(p);:}
	;
	
parameter
::=	ID:id COLON type:variableType
    {:RESULT = new Parameter();:}
	;
	
type
::=	NUMBER
	{:RESULT = VariableType.NUMBER:}
	| BIGINT
	{:RESULT = VariableType.BIG_INT:}
	| STRING
	{:RESULT = VariableType.STRING:}
	| BOOLEAN
	{:RESULT = VariableType.BOOLEAN:}
	;
	

	
instruction
::=	declarationInstruction SEMICOLON
    | funInstruction
	| assignmentInstruction SEMICOLON
	| ifInstruction
	| forInstruction
	| whileInstruction
	| doWhileInstruction
	| inDecInstruction SEMICOLON
	| callFunction SEMICOLON
	| consoleInstruction SEMICOLON
	| continueInstruction SEMICOLON
	| breakInstruction SEMICOLON
	| returnInstruction SEMICOLON
	| error SEMICOLON
	;

funInstruction
::=	FUNCTION ID LPAREN parameters RPAREN returnType LBRACE instructions RBRACE
	| FUNCTION ID LPAREN RPAREN returnType LBRACE instructions RBRACE
	;

returnType
::= COLON VOID
    | COLON NUMBER
    | COLON BIGINT
    | COLON STRING
    | COLON BOOLEAN
    |
    ;
	
	
ifInstruction
::=	IF LPAREN w RPAREN LBRACE instructions RBRACE
	| IF LPAREN w RPAREN LBRACE instructions RBRACE elseIfInstruction
	;
	
elseIfInstruction
::=	ELSE ifInstruction
	| ELSE LBRACE instructions RBRACE
	;

forInstruction
::=	FOR LPAREN declarationInstruction SEMICOLON w SEMICOLON assignmentInDec RPAREN LBRACE instructions RBRACE
	| FOR LPAREN assignmentInstruction SEMICOLON w SEMICOLON assignmentInDec RPAREN LBRACE instructions RBRACE
	;

assignmentInDec
::= inDecInstruction
    | assignmentInstruction
    ;

inDecInstruction
::=	| ID INCREMENT
	| ID DECREMENT
	;

whileInstruction
::=	WHILE LPAREN w RPAREN LBRACE instructions RBRACE
	;
	
doWhileInstruction
::=	DO LBRACE instructions RBRACE WHILE LPAREN w RPAREN SEMICOLON
    ;
	
declarationInstruction
::=	varType declarationList
	;
	
declarationList
::=	declarationList COMMA ID idType ASSIGN w
	| declarationList COMMA ID idType
	| ID idType
	| ID idType ASSIGN w
	;
	
idType
::=	COLON type
	|
	;
	
varType
::=	LET
	| CONST
	;
	
assignmentInstruction
::=	ID ASSIGN w
	;

callFunction
::= ID:id LPAREN ids:ids RPAREN
    {:RESULT = new CallFunction(id.line(), id.column(), id.value(), ids);:}
    | ID:id LPAREN RPAREN
    {:RESULT = new CallFunction(id.line(), id.column(), id.value(), null);:}
    | mathFun:math
    {:RESULT = math;:}
    ;

ids
::= ids:list COMMA w:val
    {:RESULT = list; RESULT.add(val);:}
    | w:val
    {:RESULT = new ArrayList<>(); RESULT.add(val);:}
    | error COMMA
    ;

consoleInstruction
::= CONSOLE_LOG:console LPAREN ids:ids RPAREN
    {:RESULT = new ConsoleLog(console.line(), console.column(), ids);:}
    | error RPAREN
    ;

continueInstruction
::= CONTINUE:cont
    {:RESULT = new Continue(cont.line(), cont.column());:}
    ;

breakInstruction
::= BREAK:brk
    {:RESULT = new Break(brk.line(), brk.column());:}
    ;

returnInstruction
::= RETURN:rtn
    {:RETURN = new Return(rtn.line(), rtn.column(), null);:}
    | RETURN:rtn w:val
    {:RETURN = new Return(rtn.line(), rtn.column(), val);:}
    ;

w
::=	w OR x
	| x
	;
	
x
::=	x AND y
	| y
	;

y
::= NOT z
    | z:val
    {:RESULT = val;:}
    ;

z
::=	z EQUALS a
	| z NOT_EQUALS a
	| z LESS a
	| z GREATER a
	| z LESS_EQ a
	| z GREATER_EQ a
	| a:val
	{:RESULT = val;:}
	;
	
a
::=	a PLUS b
	| a MINUS b
	| b:val
	{:RESULT = val;:}
	;
	
b
::=	b:lft TIMES:tm c:rgt
	{:RESULT = new BinaryOperation(tm.line(),tm.column(), lft, rgt, OperationType.TIMES);:}
	| b:lft DIVIDE:dv c:rgt
	{:RESULT = new BinaryOperation(dv.line(),dv.column(), lft, rgt, OperationType.DIVIDE);:}
	| b:lft MOD:md c:rgt
	{:RESULT = new BinaryOperation(md.line(),md.column(), lft, rgt, OperationType.MOD);:}
	| c:val
	{:RESULT = val;:}
	;

c
::=	castFun:cast LPAREN a:val RPAREN
    {:
    switch(cast.type()){
        case NUMBER_VALUE -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_NUM);
        }
        case BIGINT_VALUE -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_BIG);
        }
        case BOOLEAN_VALUE -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_BOOL);

        }
        case STRING_VALUE -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_STRING);

        }

    }
    :}
	| d
	{:RESULT = d;:}
	;
	
d
::=	NUMBER_VALUE:number
	{:RESULT = new Value(number.line(), number.column(), number.value(), ValueType.NUMBER_VALUE);:}

	| BIGINT_VALUE:bigInt
	{:RESULT = new Value(bigInt.line(), bigInt.column(), bigInt.value(), ValueType.BIG_INT_VALUE);:}

	| TRUE:true
	{:RESULT = new Value(true.line(), true.column(), "true", ValueType.BOOLEAN);:}

	| FALSE:false
	{:RESULT = new Value(false.line(), false.column(), "false", ValueType.BOOLEAN);:}

    | STRING_VALUE:value DOT stringFun:stringFun
	{:RESULT = stringFun; RESULT.setValue(value.value());:}

	| STRING_VALUE:string
	{:RESULT = new Value(string.line(), string.column(), string.value(), ValueType.STRING_VALUE);:}

	| ID:id
	{:RESULT = new Value(id.line(), id.column(), id.value(), ValueType.ID);:}

	| ID:value DOT stringFun:stringFun
	{:RESULT = stringFun; RESULT.setValue(value.value());:}

	| callFunction:callFunction
	{:RESULT = callFunction;:}

	| mathConst:math
	{:RESULT = math;:}

	| LPAREN a:val RPAREN
	{:RESULT = val;:}
	;
	
castFun
::=	NUMBER_FUN:nbr
	{:RESULT = nbr;:}
	| BIGINT_FUN:bg
	{:RESULT = bg;:}
	| STRING_FUN:st
	{:RESULT = st;:}
	| BOOLEAN_FUN:bl
	{:RESULT = bl;:}
	;
	
stringFun
::=	LENGTH
	| CHAR_AT LPAREN a RPAREN
	| LOWER LPAREN RPAREN
	| UPPER LPAREN RPAREN
	| CONCAT LPAREN a RPAREN
	| error RPAREN
	;

mathFun
::= ABS:bs LPAREN ids:ids RPAREN
    {:RESULT = new Math(bs.line(), bs.column(), MathType.ABS, ids;:}
    | CEIL:cl LPAREN ids:ids RPAREN
    {:RESULT = new Math(cl.line(), cl.column(), MathType.CEIL, ids;:}
    | COS:cs LPAREN ids:ids RPAREN
    {:RESULT = new Math(cs.line(), cs.column(), MathType.COS, ids;:}
    | SIN:sn LPAREN ids:ids RPAREN
    {:RESULT = new Math(sn.line(), sn.column(), MathType.SIN, ids;:}
    | TAN:tn LPAREN ids:ids RPAREN
    {:RESULT = new Math(tn.line(), tn.column(), MathType.TAN, ids;:}
    | EXP:xp LPAREN ids:ids RPAREN
    {:RESULT = new Math(xp.line(), xp.column(), MathType.EXP, ids;:}
    | FLOOR:fr LPAREN ids:ids RPAREN
    {:RESULT = new Math(fr.line(), fr.column(), MathType.FLOOR, ids;:}
    | POW:pw LPAREN ids:dis RPAREN
    {:RESULT = new Math(pw.line(), pw.column(), MathType.POW, ids;:}
    | SQRT:srt LPAREN ids:ids RPAREN
    {:RESULT = new Math(srt.line(), srt.column(), MathType.SQRT, ids;:}
    | RANDOM:rm LPAREN RPAREN
    {:RESULT = new Math(rm.line(), rm.column(), MathType.RANDOM, null);:}

    ;

mathConst
::= E:e
    {:RESULT = new Math(sqrt.line(), sqrt.column(), MathType.E, null);:}
    | PI:pi
    {:RESULT = new Math(sqrt.line(), sqrt.column(), MathType.PI, null);:}
    | SQRT_TWO:sqrt
    {:RESULT = new Math(sqrt.line(), sqrt.column(), MathType.SQRT_TWO, null);:}
    ;

