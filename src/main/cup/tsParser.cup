package com.mio.typeSecure.compiler.parser;

import com.mio.typeSecure.compiler.Token;
import com.mio.typeSecure.compiler.lexer.TSLexer;
import com.mio.typeSecure.models.TSError;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.mio.typeSecure.models.instructions.*;

class TSParser;
/*
 java -jar java-cup-11b.jar /home/mio/Escritorio/2023/proyecto-final-compi1/src/main/cup/tsParser.cup
*/
parser code {:

    private List<TSError> errorList;
    public TSParser(TSLexer lexer, List<TSError> errorList){
        super(lexer);
        this.errorList = errorList;

    }

    public Symbol scan() throws Exception {
        Symbol symbol = this.getScanner().next_token();
        if (symbol == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        while(symbol != null && symbol.sym == TSParserSym.SYM) {
            this.report_expected_token_ids();
            Token token = (Token) symbol.value;
            errorList.add(
                new TSError(token.line(), token.column(), "El simbolo: "+token.value()+" no forma parte del lenguaje.")
            );
            symbol = this.getScanner().next_token();
        }

        if (symbol == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        return symbol;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;


        if (cur_token.sym == TSParserSym.EOF) {
            errorList.add(new TSError(token.line(), token.column(), "Simbolo no esperado."));

        } else {
            String tokenVal = token.value() == null? TSParserSym.terminalNames[token.type()]: token.value();
            errorList.add(new TSError(token.line(), token.column(), "Simbolo no esperado: "+tokenVal));

        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;

        if (cur_token.sym == TSParserSym.EOF) {
            errorList.add(new TSError(token.line(), token.column(), "Simbolo no esperado."));

        } else {
            String tokenVal = token.value() == null? TSParserSym.terminalNames[token.type()]: token.value();
            errorList.add(new TSError(token.line(), token.column(), "Simbolo no esperado: "+tokenVal));


        }
    }
:}


terminal Token INCREMENT, DECREMENT, PLUS, MINUS, TIMES, DIVIDE, MOD, LPAREN, RPAREN, COLON, SEMICOLON;
terminal Token EQUALS, NOT_EQUALS, NOT, GREATER_EQ, LESS_EQ, LESS, GREATER, ASSIGN, AND, OR, COMMA, DOT;
terminal Token LBRACE, RBRACE, TRUE, FALSE, NUMBER, BIGINT, STRING, BOOLEAN, VOID, UNDEFINED, CONST, LET;
terminal Token NUMBER_FUN, BIGINT_FUN, STRING_FUN, BOOLEAN_FUN, LENGTH, CHAR_AT, LOWER, UPPER, CONCAT;
terminal Token CONSOLE_LOG, IF, ELSE, FOR, WHILE, DO, BREAK, CONTINUE, FUNCTION, RETURN, E, PI, SQRT_TWO;
terminal Token ABS, CEIL, COS, SIN, TAN, EXP, FLOOR, POW, SQRT, RANDOM, ID, NUMBER_VALUE, BIGINT_VALUE;
terminal Token STRING_VALUE, SYM, PRINT_AST, SYMBOL_TABLE;

non terminal List<Instruction> main,instructions,ids,declarationList;
non terminal List<Parameter> parameters;
non terminal Parameter parameter;
non terminal VariableType type,idType;
non terminal Instruction funInstruction,instruction;
non terminal Instruction declarationInstruction, assignmentInstruction, ifInstruction, forInstruction, whileInstruction;
non terminal Instruction doWhileInstruction,elseIfInstruction,assignmentInDec;
non terminal Instruction inDecInstruction, callFunction,consoleInstruction,a,b,c,d,w,x,y,z;
non terminal Instruction continueInstruction, breakInstruction, returnInstruction, mathFun, mathConst;
non terminal ReturnType returnType;
non terminal StringInstruction stringFun;
non terminal Token castFun,decType;

start with main;


main
::= instructions:list
    {:RESULT = list;:}
	;
	
instructions
::=	instructions:list instruction:instruction
    {:
    RESULT = list;
    if(instruction != null){

        RESULT.add(instruction);
    }
    :}
    |
    {:RESULT = new ArrayList<>();:}
	;
	
parameters
::=	parameters:list COMMA parameter:p
    {:RESULT = list; RESULT.add(p);:}
	| parameter:p
	{:RESULT = new ArrayList<>(); RESULT.add(p);:}
	;
	
parameter
::=	ID:id COLON type:variableType
    {:RESULT = new Parameter(id.value(), variableType);:}
	;
	
type
::=	NUMBER
	{:RESULT = VariableType.NUMBER;:}
	| BIGINT
	{:RESULT = VariableType.BIG_INT;:}
	| STRING
	{:RESULT = VariableType.STRING;:}
	| BOOLEAN
	{:RESULT = VariableType.BOOLEAN;:}
	;
	

	
instruction
::=	declarationInstruction:i SEMICOLON
	{:RESULT = i;:}
    | funInstruction:i
	{:RESULT = i;:}
	| assignmentInstruction:i SEMICOLON
	{:RESULT = i;:}
	| ifInstruction:i
	{:RESULT = i;:}
	| forInstruction:i
	{:RESULT = i;:}
	| whileInstruction:i
	{:RESULT = i;:}
	| doWhileInstruction:i
	{:RESULT = i;:}
	| inDecInstruction:i SEMICOLON
	{:RESULT = i;:}
	| callFunction:i SEMICOLON
	{:RESULT = i;:}
	| consoleInstruction:i SEMICOLON
	{:RESULT = i;:}
	| continueInstruction:i SEMICOLON
	{:RESULT = i;:}
	| breakInstruction:i SEMICOLON
	{:RESULT = i;:}
	| returnInstruction:i SEMICOLON
	{:RESULT = i;:}
	| error SEMICOLON
	{:RESULT = null;:}
	;

funInstruction
::=	FUNCTION ID:id LPAREN parameters:paramList RPAREN returnType:type LBRACE instructions:insList RBRACE
	{:RESULT = new Function(id.line(), id.column(),id.value(), paramList, insList, type);:}
	| FUNCTION ID:id LPAREN RPAREN returnType:type LBRACE instructions:insList RBRACE
	{:RESULT = new Function(id.line(), id.column(),id.value(), null, insList, type);:}
	;

returnType
::= COLON VOID:v
    {:RESULT = ReturnType.VOID;:}
    | COLON NUMBER:n
    {:RESULT = ReturnType.NUMBER;:}
    | COLON BIGINT:b
    {:RESULT = ReturnType.BIG_INT;:}
    | COLON STRING:s
    {:RESULT = ReturnType.STRING;:}
    | COLON BOOLEAN:b
    {:RESULT = ReturnType.BOOLEAN;:}
    |
    {:RESULT = null;:}
    ;
	
	
ifInstruction
::=	IF:ifI LPAREN w:val RPAREN LBRACE instructions:trueBlock RBRACE
    {:RESULT = new If(ifI.line(), ifI.column(), val, trueBlock, null);:}
	| IF:ifI LPAREN w:val RPAREN LBRACE instructions:trueBlock RBRACE elseIfInstruction:falseBlock
    {:RESULT = new If(ifI.line(), ifI.column(), val, trueBlock, falseBlock);:}
	;
	
elseIfInstruction
::=	ELSE ifInstruction:ifI
    {:RESULT = ifI;:}
	| ELSE:elI LBRACE instructions:insList RBRACE
	{:RESULT = new Else(elI.line(), elI.column(), insList);:}
	;

forInstruction
::=	FOR:fr LPAREN declarationInstruction:d SEMICOLON w:o SEMICOLON assignmentInDec:i RPAREN LBRACE instructions:list RBRACE
    {:RESULT = new For(fr.line(), fr.column(), d, o, i, list);:}
	| FOR:fr LPAREN assignmentInstruction:d SEMICOLON w:o SEMICOLON assignmentInDec:i RPAREN LBRACE instructions:list RBRACE
    {:RESULT = new For(fr.line(), fr.column(), d, o, i, list);:}
	{::}
	;

assignmentInDec
::= inDecInstruction:i
    {:RESULT = i;:}
    | assignmentInstruction:i
    {:RESULT = i;:}
    ;

inDecInstruction
::=	| ID:id INCREMENT:i
    {:
	RESULT = new UnaryOperation(
	    i.line(), i.column(), new Value(id.line(), id.column(), id.value(), ValueType.ID), OperationType.INCREMENT
	);
	:}
	| ID:id DECREMENT:d
	{:
	RESULT = new UnaryOperation(
	    d.line(), d.column(), new Value(id.line(), id.column(), id.value(), ValueType.ID), OperationType.DECREMENT
	);
	:}
	;

whileInstruction
::=	WHILE:wl LPAREN w:val RPAREN LBRACE instructions:list RBRACE
    {:RESULT = new While(wl.line(),wl.column(), val, list);:}
	;
	
doWhileInstruction
::=	DO:doI LBRACE instructions:list RBRACE WHILE LPAREN w:val RPAREN SEMICOLON
    {:RESULT = new DoWhile(doI.line(), doI.column(), val, list);:}
    ;
	
declarationInstruction
::=	decType:decType declarationList:list
    {:
        DeclarationType type = DeclarationType.CONST;
        if(decType.type() == TSParserSym.LET){
            type = DeclarationType.LET;
        }
        RESULT = new Declaration(decType.line(), decType.column(), type, list);
    :}
	;
	
declarationList
::=	declarationList:list COMMA ID:id idType:variableType ASSIGN w:val
	{:RESULT = list; RESULT.add(new VariableDeclaration(id.line(),id.column(),id.value(),variableType, val));:}

	| declarationList:list COMMA ID:id idType:variableType
	{:RESULT = list; RESULT.add(new VariableDeclaration(id.line(),id.column(),id.value(),variableType, null));:}
	| ID:id idType:variableType
	{:RESULT = new ArrayList<>(); RESULT.add(new VariableDeclaration(id.line(),id.column(),id.value(),variableType, null));:}

	| ID:id idType:variableType ASSIGN w:val
	{:RESULT = new ArrayList<>(); RESULT.add(new VariableDeclaration(id.line(),id.column(),id.value(),variableType, val));:}
	;
	
idType
::=	COLON type:type
    {:RESULT = type;:}
	|
	{:RESULT = null;:}
	;
	
decType
::=	LET:t
	{:RESULT = t;:}
	| CONST:t
	{:RESULT = t;:}
	;
	
assignmentInstruction
::=	ID:id ASSIGN w:val
    {:RESULT = new Assignment(id.line(), id.column(), id.value(), val);:}
	;

callFunction
::= ID:id LPAREN ids:ids RPAREN
    {:RESULT = new CallFunction(id.line(), id.column(), id.value(), ids);:}
    | ID:id LPAREN RPAREN
    {:RESULT = new CallFunction(id.line(), id.column(), id.value(), null);:}
    | mathFun:math
    {:RESULT = math;:}
    ;

ids
::= ids:list COMMA w:val
    {:RESULT = list; RESULT.add(val);:}
    | w:val
    {:RESULT = new ArrayList<>(); RESULT.add(val);:}
    | error COMMA
    ;

consoleInstruction
::= CONSOLE_LOG:console LPAREN ids:ids RPAREN
    {:RESULT = new ConsoleLog(console.line(), console.column(), ids);:}
    | error RPAREN
    ;

continueInstruction
::= CONTINUE:cont
    {:RESULT = new Continue(cont.line(), cont.column());:}
    ;

breakInstruction
::= BREAK:brk
    {:RESULT = new Break(brk.line(), brk.column());:}
    ;

returnInstruction
::= RETURN:rtn
    {:RESULT = new ReturnInstruction(rtn.line(), rtn.column(), null);:}
    | RETURN:rtn w:val
    {:RESULT = new ReturnInstruction(rtn.line(), rtn.column(), val);:}
    ;

w
::=	w:lft OR:op x:rgt
	{:RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.OR);:}
	| x:val
	{:RESULT = val;:}

	;
	
x
::=	x:lft AND:op y:rgt
	{:RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.AND);:}
	| y:val
	{:RESULT = val;:}
	;

y
::= NOT:op z:rgt
    {:RESULT = new UnaryOperation(op.line(), op.column(), rgt, OperationType.NOT);:}
    | z:val
    {:RESULT = val;:}
    ;

z
::=	z:lft EQUALS:op a:rgt
	{:RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.EQUALS);:}

	| z:lft NOT_EQUALS:op a:rgt
	{:RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.NOT_EQUALS);:}

	| z:lft LESS:op a:rgt
	{:RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.LESS);:}

	| z:lft GREATER:op a:rgt
	{:RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.GREATER);:}

	| z:lft LESS_EQ:op a:rgt
	{:RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.LESS_EQ);:}

	| z:lft GREATER_EQ:op a:rgt
	{:RESULT = new BinaryOperation(op.line(),op.column(), lft, rgt, OperationType.GREATER_EQ);:}

	| a:val
	{:RESULT = val;:}
	;
	
a
::=	a:lft PLUS:ps b:rgt
	{:RESULT = new BinaryOperation(ps.line(),ps.column(), lft, rgt, OperationType.PLUS);:}

	| a:lft MINUS:ms b:rgt
	{:RESULT = new BinaryOperation(ms.line(),ms.column(), lft, rgt, OperationType.MINUS);:}

	| b:val
	{:RESULT = val;:}
	;
	
b
::=	b:lft TIMES:tm c:rgt
	{:RESULT = new BinaryOperation(tm.line(),tm.column(), lft, rgt, OperationType.TIMES);:}
	| b:lft DIVIDE:dv c:rgt
	{:RESULT = new BinaryOperation(dv.line(),dv.column(), lft, rgt, OperationType.DIVIDE);:}
	| b:lft MOD:md c:rgt
	{:RESULT = new BinaryOperation(md.line(),md.column(), lft, rgt, OperationType.MOD);:}
	| c:val
	{:RESULT = val;:}
	;

c
::=	castFun:cast LPAREN w:val RPAREN
    {:
    switch(cast.type()){
        case TSParserSym.NUMBER_FUN -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_NUM);
        }
        case TSParserSym.BIGINT_FUN -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_BIG);
        }
        case TSParserSym.BOOLEAN_FUN -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_BOOL);

        }
        case TSParserSym.STRING_FUN -> {
            RESULT = new Cast(cast.line(), cast.column(), val, CastType.CAST_STRING);

        }

    }
    :}
	| MINUS:m d:d
	{:RESULT = new UnaryOperation(m.line(), m.column(), d, OperationType.MINUS);:}
	| PLUS d:d
	{:RESULT = d;:}
	| d:d
	{:RESULT = d;:}
	;
	
d
::=	NUMBER_VALUE:number
	{:RESULT = new Value(number.line(), number.column(), number.value(), ValueType.NUMBER_VALUE);:}

	| BIGINT_VALUE:bigInt
	{:RESULT = new Value(bigInt.line(), bigInt.column(), bigInt.value(), ValueType.BIG_INT_VALUE);:}

	| TRUE:trueVal
	{:RESULT = new Value(trueVal.line(), trueVal.column(), "true", ValueType.BOOLEAN);:}

	| FALSE:falseVal
	{:RESULT = new Value(falseVal.line(), falseVal.column(), "false", ValueType.BOOLEAN);:}

    | STRING_VALUE:value DOT stringFun:stringFun
	{:stringFun.setValue(value.value()); RESULT = stringFun;:}

	| STRING_VALUE:string
	{:RESULT = new Value(string.line(), string.column(), string.value(), ValueType.STRING_VALUE);:}

	| ID:id
	{:RESULT = new Value(id.line(), id.column(), id.value(), ValueType.ID);:}

	| ID:value DOT stringFun:stringFun
	{:stringFun.setValue(value.value()); RESULT = stringFun;:}

	| callFunction:callFunction
	{:RESULT = callFunction;:}

	| mathConst:math
	{:RESULT = math;:}

	| LPAREN w:val RPAREN
	{:RESULT = val;:}
	;
	
castFun
::=	NUMBER_FUN:nbr
	{:RESULT = nbr;:}
	| BIGINT_FUN:bg
	{:RESULT = bg;:}
	| STRING_FUN:st
	{:RESULT = st;:}
	| BOOLEAN_FUN:bl
	{:RESULT = bl;:}
	;
	
stringFun
::=	LENGTH:lngt
    {:RESULT = new StringInstruction(lngt.line(),lngt.column(), null, StringType.LENGTH, null);:}
	| CHAR_AT:ct LPAREN a:val RPAREN
    {:RESULT = new StringInstruction(ct.line(),ct.column(), null, StringType.CHAR_AT, val);:}
	| LOWER:lw LPAREN RPAREN
    {:RESULT = new StringInstruction(lw.line(),lw.column(), null, StringType.LOWER, null);:}

	| UPPER:up LPAREN RPAREN
    {:RESULT = new StringInstruction(up.line(),up.column(), null, StringType.UPPER, null);:}

	| CONCAT:cct LPAREN a:val RPAREN
    {:RESULT = new StringInstruction(cct.line(),cct.column(), null, StringType.CONCAT, val);:}

	| error RPAREN
	;

mathFun
::= ABS:bs LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(bs.line(), bs.column(), MathType.ABS, ids);:}
    | CEIL:cl LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(cl.line(), cl.column(), MathType.CEIL, ids);:}
    | COS:cs LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(cs.line(), cs.column(), MathType.COS, ids);:}
    | SIN:sn LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(sn.line(), sn.column(), MathType.SIN, ids);:}
    | TAN:tn LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(tn.line(), tn.column(), MathType.TAN, ids);:}
    | EXP:xp LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(xp.line(), xp.column(), MathType.EXP, ids);:}
    | FLOOR:fr LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(fr.line(), fr.column(), MathType.FLOOR, ids);:}
    | POW:pw LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(pw.line(), pw.column(), MathType.POW, ids);:}
    | SQRT:srt LPAREN ids:ids RPAREN
    {:RESULT = new MathInstruction(srt.line(), srt.column(), MathType.SQRT, ids);:}
    | RANDOM:rm LPAREN RPAREN
    {:RESULT = new MathInstruction(rm.line(), rm.column(), MathType.RANDOM, null);:}

    ;

mathConst
::= E:e
    {:RESULT = new MathInstruction(e.line(), e.column(), MathType.E, null);:}
    | PI:pi
    {:RESULT = new MathInstruction(pi.line(), pi.column(), MathType.PI, null);:}
    | SQRT_TWO:sqrt
    {:RESULT = new MathInstruction(sqrt.line(), sqrt.column(), MathType.SQRT_TWO, null);:}
    ;

